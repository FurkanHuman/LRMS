// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20220611132843_MigCreateV4")]
    partial class MigCreateV4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.4.22229.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcademicJournalCategory", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("AcademicJournalsId", "CategoriesId")
                        .HasName("pk_academic_journal_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_academic_journal_category_categories_id");

                    b.ToTable("academic_journal_category", (string)null);
                });

            modelBuilder.Entity("AcademicJournalDimension", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("AcademicJournalsId", "DimensionsId")
                        .HasName("pk_academic_journal_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_academic_journal_dimension_dimensions_id");

                    b.ToTable("academic_journal_dimension", (string)null);
                });

            modelBuilder.Entity("AcademicJournalEditor", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editors_id");

                    b.HasKey("AcademicJournalsId", "EditorsId")
                        .HasName("pk_academic_journal_editor");

                    b.HasIndex("EditorsId")
                        .HasDatabaseName("ix_academic_journal_editor_editors_id");

                    b.ToTable("academic_journal_editor", (string)null);
                });

            modelBuilder.Entity("AcademicJournalEMaterialFile", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("AcademicJournalsId", "EMaterialFilesId")
                        .HasName("pk_academic_journal_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_academic_journal_e_material_file_e_material_files_id");

                    b.ToTable("academic_journal_e_material_file", (string)null);
                });

            modelBuilder.Entity("AcademicJournalKit", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("AcademicJournalsId", "KitsId")
                        .HasName("pk_academic_journal_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_academic_journal_kit_kits_id");

                    b.ToTable("academic_journal_kit", (string)null);
                });

            modelBuilder.Entity("AcademicJournalPublisher", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uuid")
                        .HasColumnName("publishers_id");

                    b.HasKey("AcademicJournalsId", "PublishersId")
                        .HasName("pk_academic_journal_publisher");

                    b.HasIndex("PublishersId")
                        .HasDatabaseName("ix_academic_journal_publisher_publishers_id");

                    b.ToTable("academic_journal_publisher", (string)null);
                });

            modelBuilder.Entity("AcademicJournalReference", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("ReferencesId")
                        .HasColumnType("uuid")
                        .HasColumnName("references_id");

                    b.HasKey("AcademicJournalsId", "ReferencesId")
                        .HasName("pk_academic_journal_reference");

                    b.HasIndex("ReferencesId")
                        .HasDatabaseName("ix_academic_journal_reference_references_id");

                    b.ToTable("academic_journal_reference", (string)null);
                });

            modelBuilder.Entity("AcademicJournalResearcher", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("ResearchersId")
                        .HasColumnType("uuid")
                        .HasColumnName("researchers_id");

                    b.HasKey("AcademicJournalsId", "ResearchersId")
                        .HasName("pk_academic_journal_researcher");

                    b.HasIndex("ResearchersId")
                        .HasDatabaseName("ix_academic_journal_researcher_researchers_id");

                    b.ToTable("academic_journal_researcher", (string)null);
                });

            modelBuilder.Entity("AcademicJournalTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("AcademicJournalsId", "TechnicalPlaceholdersId")
                        .HasName("pk_academic_journal_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_academic_journal_technical_placeholder_technical_placeholde");

                    b.ToTable("academic_journal_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("AudioRecordCategory", b =>
                {
                    b.Property<Guid>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("AudioRecordsId", "CategoriesId")
                        .HasName("pk_audio_record_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_audio_record_category_categories_id");

                    b.ToTable("audio_record_category", (string)null);
                });

            modelBuilder.Entity("AudioRecordDimension", b =>
                {
                    b.Property<Guid>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("AudioRecordsId", "DimensionsId")
                        .HasName("pk_audio_record_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_audio_record_dimension_dimensions_id");

                    b.ToTable("audio_record_dimension", (string)null);
                });

            modelBuilder.Entity("AudioRecordEMaterialFile", b =>
                {
                    b.Property<Guid>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("AudioRecordsId", "EMaterialFilesId")
                        .HasName("pk_audio_record_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_audio_record_e_material_file_e_material_files_id");

                    b.ToTable("audio_record_e_material_file", (string)null);
                });

            modelBuilder.Entity("AudioRecordKit", b =>
                {
                    b.Property<Guid>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("AudioRecordsId", "KitsId")
                        .HasName("pk_audio_record_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_audio_record_kit_kits_id");

                    b.ToTable("audio_record_kit", (string)null);
                });

            modelBuilder.Entity("AudioRecordTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("AudioRecordsId", "TechnicalPlaceholdersId")
                        .HasName("pk_audio_record_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_audio_record_technical_placeholder_technical_placeholders_id");

                    b.ToTable("audio_record_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("BooksId", "CategoriesId")
                        .HasName("pk_book_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_book_category_categories_id");

                    b.ToTable("book_category", (string)null);
                });

            modelBuilder.Entity("BookCoverCap", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<byte>("CoverCapsId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_caps_id");

                    b.HasKey("BooksId", "CoverCapsId")
                        .HasName("pk_book_cover_cap");

                    b.HasIndex("CoverCapsId")
                        .HasDatabaseName("ix_book_cover_cap_cover_caps_id");

                    b.ToTable("book_cover_cap", (string)null);
                });

            modelBuilder.Entity("BookDimension", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("BooksId", "DimensionsId")
                        .HasName("pk_book_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_book_dimension_dimensions_id");

                    b.ToTable("book_dimension", (string)null);
                });

            modelBuilder.Entity("BookDirector", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("DirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("directors_id");

                    b.HasKey("BooksId", "DirectorsId")
                        .HasName("pk_book_director");

                    b.HasIndex("DirectorsId")
                        .HasDatabaseName("ix_book_director_directors_id");

                    b.ToTable("book_director", (string)null);
                });

            modelBuilder.Entity("BookEdition", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("EditionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editions_id");

                    b.HasKey("BooksId", "EditionsId")
                        .HasName("pk_book_edition");

                    b.HasIndex("EditionsId")
                        .HasDatabaseName("ix_book_edition_editions_id");

                    b.ToTable("book_edition", (string)null);
                });

            modelBuilder.Entity("BookEditor", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editors_id");

                    b.HasKey("BooksId", "EditorsId")
                        .HasName("pk_book_editor");

                    b.HasIndex("EditorsId")
                        .HasDatabaseName("ix_book_editor_editors_id");

                    b.ToTable("book_editor", (string)null);
                });

            modelBuilder.Entity("BookEMaterialFile", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("BooksId", "EMaterialFilesId")
                        .HasName("pk_book_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_book_e_material_file_e_material_files_id");

                    b.ToTable("book_e_material_file", (string)null);
                });

            modelBuilder.Entity("BookGraphicDesigner", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("GraphicDesignsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_designs_id");

                    b.HasKey("BooksId", "GraphicDesignsId")
                        .HasName("pk_book_graphic_designer");

                    b.HasIndex("GraphicDesignsId")
                        .HasDatabaseName("ix_book_graphic_designer_graphic_designs_id");

                    b.ToTable("book_graphic_designer", (string)null);
                });

            modelBuilder.Entity("BookGraphicDirector", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("GraphicDirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_directors_id");

                    b.HasKey("BooksId", "GraphicDirectorsId")
                        .HasName("pk_book_graphic_director");

                    b.HasIndex("GraphicDirectorsId")
                        .HasDatabaseName("ix_book_graphic_director_graphic_directors_id");

                    b.ToTable("book_graphic_director", (string)null);
                });

            modelBuilder.Entity("BookImage", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("CoverImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_images_id");

                    b.HasKey("BooksId", "CoverImagesId")
                        .HasName("pk_book_image");

                    b.HasIndex("CoverImagesId")
                        .HasDatabaseName("ix_book_image_cover_images_id");

                    b.ToTable("book_image", (string)null);
                });

            modelBuilder.Entity("BookInterpreters", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.HasKey("BooksId", "InterpretersId")
                        .HasName("pk_book_interpreters");

                    b.HasIndex("InterpretersId")
                        .HasDatabaseName("ix_book_interpreters_interpreters_id");

                    b.ToTable("book_interpreters", (string)null);
                });

            modelBuilder.Entity("BookKit", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("BooksId", "KitsId")
                        .HasName("pk_book_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_book_kit_kits_id");

                    b.ToTable("book_kit", (string)null);
                });

            modelBuilder.Entity("BookOtherPeople", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("OtherPeoplesId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_peoples_id");

                    b.HasKey("BooksId", "OtherPeoplesId")
                        .HasName("pk_book_other_people");

                    b.HasIndex("OtherPeoplesId")
                        .HasDatabaseName("ix_book_other_people_other_peoples_id");

                    b.ToTable("book_other_people", (string)null);
                });

            modelBuilder.Entity("BookRedaction", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("RedactionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("redactions_id");

                    b.HasKey("BooksId", "RedactionsId")
                        .HasName("pk_book_redaction");

                    b.HasIndex("RedactionsId")
                        .HasDatabaseName("ix_book_redaction_redactions_id");

                    b.ToTable("book_redaction", (string)null);
                });

            modelBuilder.Entity("BookReference", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("ReferencesId")
                        .HasColumnType("uuid")
                        .HasColumnName("references_id");

                    b.HasKey("BooksId", "ReferencesId")
                        .HasName("pk_book_reference");

                    b.HasIndex("ReferencesId")
                        .HasDatabaseName("ix_book_reference_references_id");

                    b.ToTable("book_reference", (string)null);
                });

            modelBuilder.Entity("BookSeriesCategory", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("BookSeriesId", "CategoriesId")
                        .HasName("pk_book_series_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_book_series_category_categories_id");

                    b.ToTable("book_series_category", (string)null);
                });

            modelBuilder.Entity("BookSeriesCoverCap", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<byte>("CoverCapsId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_caps_id");

                    b.HasKey("BookSeriesId", "CoverCapsId")
                        .HasName("pk_book_series_cover_cap");

                    b.HasIndex("CoverCapsId")
                        .HasDatabaseName("ix_book_series_cover_cap_cover_caps_id");

                    b.ToTable("book_series_cover_cap", (string)null);
                });

            modelBuilder.Entity("BookSeriesDimension", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("BookSeriesId", "DimensionsId")
                        .HasName("pk_book_series_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_book_series_dimension_dimensions_id");

                    b.ToTable("book_series_dimension", (string)null);
                });

            modelBuilder.Entity("BookSeriesDirector", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("DirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("directors_id");

                    b.HasKey("BookSeriesId", "DirectorsId")
                        .HasName("pk_book_series_director");

                    b.HasIndex("DirectorsId")
                        .HasDatabaseName("ix_book_series_director_directors_id");

                    b.ToTable("book_series_director", (string)null);
                });

            modelBuilder.Entity("BookSeriesEdition", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("EditionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editions_id");

                    b.HasKey("BookSeriesId", "EditionsId")
                        .HasName("pk_book_series_edition");

                    b.HasIndex("EditionsId")
                        .HasDatabaseName("ix_book_series_edition_editions_id");

                    b.ToTable("book_series_edition", (string)null);
                });

            modelBuilder.Entity("BookSeriesEditor", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editors_id");

                    b.HasKey("BookSeriesId", "EditorsId")
                        .HasName("pk_book_series_editor");

                    b.HasIndex("EditorsId")
                        .HasDatabaseName("ix_book_series_editor_editors_id");

                    b.ToTable("book_series_editor", (string)null);
                });

            modelBuilder.Entity("BookSeriesEMaterialFile", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("BookSeriesId", "EMaterialFilesId")
                        .HasName("pk_book_series_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_book_series_e_material_file_e_material_files_id");

                    b.ToTable("book_series_e_material_file", (string)null);
                });

            modelBuilder.Entity("BookSeriesGraphicDesigner", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("GraphicDesignsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_designs_id");

                    b.HasKey("BookSeriesId", "GraphicDesignsId")
                        .HasName("pk_book_series_graphic_designer");

                    b.HasIndex("GraphicDesignsId")
                        .HasDatabaseName("ix_book_series_graphic_designer_graphic_designs_id");

                    b.ToTable("book_series_graphic_designer", (string)null);
                });

            modelBuilder.Entity("BookSeriesGraphicDirector", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("GraphicDirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_directors_id");

                    b.HasKey("BookSeriesId", "GraphicDirectorsId")
                        .HasName("pk_book_series_graphic_director");

                    b.HasIndex("GraphicDirectorsId")
                        .HasDatabaseName("ix_book_series_graphic_director_graphic_directors_id");

                    b.ToTable("book_series_graphic_director", (string)null);
                });

            modelBuilder.Entity("BookSeriesImage", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("CoverImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_images_id");

                    b.HasKey("BookSeriesId", "CoverImagesId")
                        .HasName("pk_book_series_image");

                    b.HasIndex("CoverImagesId")
                        .HasDatabaseName("ix_book_series_image_cover_images_id");

                    b.ToTable("book_series_image", (string)null);
                });

            modelBuilder.Entity("BookSeriesInterpreters", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.HasKey("BookSeriesId", "InterpretersId")
                        .HasName("pk_book_series_interpreters");

                    b.HasIndex("InterpretersId")
                        .HasDatabaseName("ix_book_series_interpreters_interpreters_id");

                    b.ToTable("book_series_interpreters", (string)null);
                });

            modelBuilder.Entity("BookSeriesKit", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("BookSeriesId", "KitsId")
                        .HasName("pk_book_series_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_book_series_kit_kits_id");

                    b.ToTable("book_series_kit", (string)null);
                });

            modelBuilder.Entity("BookSeriesOtherPeople", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("OtherPeoplesId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_peoples_id");

                    b.HasKey("BookSeriesId", "OtherPeoplesId")
                        .HasName("pk_book_series_other_people");

                    b.HasIndex("OtherPeoplesId")
                        .HasDatabaseName("ix_book_series_other_people_other_peoples_id");

                    b.ToTable("book_series_other_people", (string)null);
                });

            modelBuilder.Entity("BookSeriesRedaction", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("RedactionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("redactions_id");

                    b.HasKey("BookSeriesId", "RedactionsId")
                        .HasName("pk_book_series_redaction");

                    b.HasIndex("RedactionsId")
                        .HasDatabaseName("ix_book_series_redaction_redactions_id");

                    b.ToTable("book_series_redaction", (string)null);
                });

            modelBuilder.Entity("BookSeriesTechnicalNumber", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("TechnicalNumbersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_numbers_id");

                    b.HasKey("BookSeriesId", "TechnicalNumbersId")
                        .HasName("pk_book_series_technical_number");

                    b.HasIndex("TechnicalNumbersId")
                        .HasDatabaseName("ix_book_series_technical_number_technical_numbers_id");

                    b.ToTable("book_series_technical_number", (string)null);
                });

            modelBuilder.Entity("BookSeriesTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("BookSeriesId", "TechnicalPlaceholdersId")
                        .HasName("pk_book_series_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_book_series_technical_placeholder_technical_placeholders_id");

                    b.ToTable("book_series_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("BookSeriesWriter", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("WritersId")
                        .HasColumnType("uuid")
                        .HasColumnName("writers_id");

                    b.HasKey("BookSeriesId", "WritersId")
                        .HasName("pk_book_series_writer");

                    b.HasIndex("WritersId")
                        .HasDatabaseName("ix_book_series_writer_writers_id");

                    b.ToTable("book_series_writer", (string)null);
                });

            modelBuilder.Entity("BookTechnicalNumber", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("TechnicalNumbersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_numbers_id");

                    b.HasKey("BooksId", "TechnicalNumbersId")
                        .HasName("pk_book_technical_number");

                    b.HasIndex("TechnicalNumbersId")
                        .HasDatabaseName("ix_book_technical_number_technical_numbers_id");

                    b.ToTable("book_technical_number", (string)null);
                });

            modelBuilder.Entity("BookTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("BooksId", "TechnicalPlaceholdersId")
                        .HasName("pk_book_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_book_technical_placeholder_technical_placeholders_id");

                    b.ToTable("book_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("BookWriter", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("WritersId")
                        .HasColumnType("uuid")
                        .HasColumnName("writers_id");

                    b.HasKey("BooksId", "WritersId")
                        .HasName("pk_book_writer");

                    b.HasIndex("WritersId")
                        .HasDatabaseName("ix_book_writer_writers_id");

                    b.ToTable("book_writer", (string)null);
                });

            modelBuilder.Entity("CartographicMaterialCategory", b =>
                {
                    b.Property<Guid>("CartographicMaterialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("cartographic_materials_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("CartographicMaterialsId", "CategoriesId")
                        .HasName("pk_cartographic_material_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_cartographic_material_category_categories_id");

                    b.ToTable("cartographic_material_category", (string)null);
                });

            modelBuilder.Entity("CartographicMaterialDimension", b =>
                {
                    b.Property<Guid>("CartographicMaterialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("cartographic_materials_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("CartographicMaterialsId", "DimensionsId")
                        .HasName("pk_cartographic_material_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_cartographic_material_dimension_dimensions_id");

                    b.ToTable("cartographic_material_dimension", (string)null);
                });

            modelBuilder.Entity("CartographicMaterialEMaterialFile", b =>
                {
                    b.Property<Guid>("CartographicMaterialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("cartographic_materials_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("CartographicMaterialsId", "EMaterialFilesId")
                        .HasName("pk_cartographic_material_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_cartographic_material_e_material_file_e_material_files_id");

                    b.ToTable("cartographic_material_e_material_file", (string)null);
                });

            modelBuilder.Entity("CartographicMaterialImage", b =>
                {
                    b.Property<Guid>("CartographicMaterialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("cartographic_materials_id");

                    b.Property<Guid>("ImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("images_id");

                    b.HasKey("CartographicMaterialsId", "ImagesId")
                        .HasName("pk_cartographic_material_image");

                    b.HasIndex("ImagesId")
                        .HasDatabaseName("ix_cartographic_material_image_images_id");

                    b.ToTable("cartographic_material_image", (string)null);
                });

            modelBuilder.Entity("CartographicMaterialKit", b =>
                {
                    b.Property<Guid>("CartographicMaterialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("cartographic_materials_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("CartographicMaterialsId", "KitsId")
                        .HasName("pk_cartographic_material_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_cartographic_material_kit_kits_id");

                    b.ToTable("cartographic_material_kit", (string)null);
                });

            modelBuilder.Entity("CartographicMaterialTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("CartographicMaterialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("cartographic_materials_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("CartographicMaterialsId", "TechnicalPlaceholdersId")
                        .HasName("pk_cartographic_material_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_cartographic_material_technical_placeholder_technical_place");

                    b.ToTable("cartographic_material_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("CategoryDepiction", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("DepictionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("depictions_id");

                    b.HasKey("CategoriesId", "DepictionsId")
                        .HasName("pk_category_depiction");

                    b.HasIndex("DepictionsId")
                        .HasDatabaseName("ix_category_depiction_depictions_id");

                    b.ToTable("category_depiction", (string)null);
                });

            modelBuilder.Entity("CategoryDissertation", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("DissertationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dissertations_id");

                    b.HasKey("CategoriesId", "DissertationsId")
                        .HasName("pk_category_dissertation");

                    b.HasIndex("DissertationsId")
                        .HasDatabaseName("ix_category_dissertation_dissertations_id");

                    b.ToTable("category_dissertation", (string)null);
                });

            modelBuilder.Entity("CategoryElectronicsResource", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("ElectronicsResourcesId")
                        .HasColumnType("uuid")
                        .HasColumnName("electronics_resources_id");

                    b.HasKey("CategoriesId", "ElectronicsResourcesId")
                        .HasName("pk_category_electronics_resource");

                    b.HasIndex("ElectronicsResourcesId")
                        .HasDatabaseName("ix_category_electronics_resource_electronics_resources_id");

                    b.ToTable("category_electronics_resource", (string)null);
                });

            modelBuilder.Entity("CategoryEncyclopedia", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.HasKey("CategoriesId", "EncyclopediasId")
                        .HasName("pk_category_encyclopedia");

                    b.HasIndex("EncyclopediasId")
                        .HasDatabaseName("ix_category_encyclopedia_encyclopedias_id");

                    b.ToTable("category_encyclopedia", (string)null);
                });

            modelBuilder.Entity("CategoryGraphicalImage", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("GraphicalImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphical_images_id");

                    b.HasKey("CategoriesId", "GraphicalImagesId")
                        .HasName("pk_category_graphical_image");

                    b.HasIndex("GraphicalImagesId")
                        .HasDatabaseName("ix_category_graphical_image_graphical_images_id");

                    b.ToTable("category_graphical_image", (string)null);
                });

            modelBuilder.Entity("CategoryMagazine", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("CategoriesId", "MagazinesId")
                        .HasName("pk_category_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_category_magazine_magazines_id");

                    b.ToTable("category_magazine", (string)null);
                });

            modelBuilder.Entity("CategoryMicroform", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("MicroformsId")
                        .HasColumnType("uuid")
                        .HasColumnName("microforms_id");

                    b.HasKey("CategoriesId", "MicroformsId")
                        .HasName("pk_category_microform");

                    b.HasIndex("MicroformsId")
                        .HasDatabaseName("ix_category_microform_microforms_id");

                    b.ToTable("category_microform", (string)null);
                });

            modelBuilder.Entity("CategoryMusicalNote", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("MusicalNotesId")
                        .HasColumnType("uuid")
                        .HasColumnName("musical_notes_id");

                    b.HasKey("CategoriesId", "MusicalNotesId")
                        .HasName("pk_category_musical_note");

                    b.HasIndex("MusicalNotesId")
                        .HasDatabaseName("ix_category_musical_note_musical_notes_id");

                    b.ToTable("category_musical_note", (string)null);
                });

            modelBuilder.Entity("CategoryNewsPaper", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("CategoriesId", "NewsPapersId")
                        .HasName("pk_category_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_category_news_paper_news_papers_id");

                    b.ToTable("category_news_paper", (string)null);
                });

            modelBuilder.Entity("CategoryObject3D", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("Object3DsId")
                        .HasColumnType("uuid")
                        .HasColumnName("object3ds_id");

                    b.HasKey("CategoriesId", "Object3DsId")
                        .HasName("pk_category_object3d");

                    b.HasIndex("Object3DsId")
                        .HasDatabaseName("ix_category_object3d_object3ds_id");

                    b.ToTable("category_object3d", (string)null);
                });

            modelBuilder.Entity("CategoryPainting", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("PaintingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("paintings_id");

                    b.HasKey("CategoriesId", "PaintingsId")
                        .HasName("pk_category_painting");

                    b.HasIndex("PaintingsId")
                        .HasDatabaseName("ix_category_painting_paintings_id");

                    b.ToTable("category_painting", (string)null);
                });

            modelBuilder.Entity("CategoryPoster", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("PostersId")
                        .HasColumnType("uuid")
                        .HasColumnName("posters_id");

                    b.HasKey("CategoriesId", "PostersId")
                        .HasName("pk_category_poster");

                    b.HasIndex("PostersId")
                        .HasDatabaseName("ix_category_poster_posters_id");

                    b.ToTable("category_poster", (string)null);
                });

            modelBuilder.Entity("CategoryThesis", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("ThesesId")
                        .HasColumnType("uuid")
                        .HasColumnName("theses_id");

                    b.HasKey("CategoriesId", "ThesesId")
                        .HasName("pk_category_thesis");

                    b.HasIndex("ThesesId")
                        .HasDatabaseName("ix_category_thesis_theses_id");

                    b.ToTable("category_thesis", (string)null);
                });

            modelBuilder.Entity("ComposerMusicalNote", b =>
                {
                    b.Property<Guid>("ComposersId")
                        .HasColumnType("uuid")
                        .HasColumnName("composers_id");

                    b.Property<Guid>("MusicalNotesId")
                        .HasColumnType("uuid")
                        .HasColumnName("musical_notes_id");

                    b.HasKey("ComposersId", "MusicalNotesId")
                        .HasName("pk_composer_musical_note");

                    b.HasIndex("MusicalNotesId")
                        .HasDatabaseName("ix_composer_musical_note_musical_notes_id");

                    b.ToTable("composer_musical_note", (string)null);
                });

            modelBuilder.Entity("CoverCapEncyclopedia", b =>
                {
                    b.Property<byte>("CoverCapsId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_caps_id");

                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.HasKey("CoverCapsId", "EncyclopediasId")
                        .HasName("pk_cover_cap_encyclopedia");

                    b.HasIndex("EncyclopediasId")
                        .HasDatabaseName("ix_cover_cap_encyclopedia_encyclopedias_id");

                    b.ToTable("cover_cap_encyclopedia", (string)null);
                });

            modelBuilder.Entity("CoverCapMagazine", b =>
                {
                    b.Property<byte>("CoverCapsId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_caps_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("CoverCapsId", "MagazinesId")
                        .HasName("pk_cover_cap_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_cover_cap_magazine_magazines_id");

                    b.ToTable("cover_cap_magazine", (string)null);
                });

            modelBuilder.Entity("CoverCapNewsPaper", b =>
                {
                    b.Property<byte>("CoverCapsId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_caps_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("CoverCapsId", "NewsPapersId")
                        .HasName("pk_cover_cap_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_cover_cap_news_paper_news_papers_id");

                    b.ToTable("cover_cap_news_paper", (string)null);
                });

            modelBuilder.Entity("DepictionDimension", b =>
                {
                    b.Property<Guid>("DepictionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("depictions_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("DepictionsId", "DimensionsId")
                        .HasName("pk_depiction_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_depiction_dimension_dimensions_id");

                    b.ToTable("depiction_dimension", (string)null);
                });

            modelBuilder.Entity("DepictionEMaterialFile", b =>
                {
                    b.Property<Guid>("DepictionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("depictions_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("DepictionsId", "EMaterialFilesId")
                        .HasName("pk_depiction_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_depiction_e_material_file_e_material_files_id");

                    b.ToTable("depiction_e_material_file", (string)null);
                });

            modelBuilder.Entity("DepictionKit", b =>
                {
                    b.Property<Guid>("DepictionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("depictions_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("DepictionsId", "KitsId")
                        .HasName("pk_depiction_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_depiction_kit_kits_id");

                    b.ToTable("depiction_kit", (string)null);
                });

            modelBuilder.Entity("DepictionTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("DepictionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("depictions_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("DepictionsId", "TechnicalPlaceholdersId")
                        .HasName("pk_depiction_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_depiction_technical_placeholder_technical_placeholders_id");

                    b.ToTable("depiction_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("DimensionDissertation", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("DissertationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dissertations_id");

                    b.HasKey("DimensionsId", "DissertationsId")
                        .HasName("pk_dimension_dissertation");

                    b.HasIndex("DissertationsId")
                        .HasDatabaseName("ix_dimension_dissertation_dissertations_id");

                    b.ToTable("dimension_dissertation", (string)null);
                });

            modelBuilder.Entity("DimensionElectronicsResource", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("ElectronicsResourcesId")
                        .HasColumnType("uuid")
                        .HasColumnName("electronics_resources_id");

                    b.HasKey("DimensionsId", "ElectronicsResourcesId")
                        .HasName("pk_dimension_electronics_resource");

                    b.HasIndex("ElectronicsResourcesId")
                        .HasDatabaseName("ix_dimension_electronics_resource_electronics_resources_id");

                    b.ToTable("dimension_electronics_resource", (string)null);
                });

            modelBuilder.Entity("DimensionEncyclopedia", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.HasKey("DimensionsId", "EncyclopediasId")
                        .HasName("pk_dimension_encyclopedia");

                    b.HasIndex("EncyclopediasId")
                        .HasDatabaseName("ix_dimension_encyclopedia_encyclopedias_id");

                    b.ToTable("dimension_encyclopedia", (string)null);
                });

            modelBuilder.Entity("DimensionGraphicalImage", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("GraphicalImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphical_images_id");

                    b.HasKey("DimensionsId", "GraphicalImagesId")
                        .HasName("pk_dimension_graphical_image");

                    b.HasIndex("GraphicalImagesId")
                        .HasDatabaseName("ix_dimension_graphical_image_graphical_images_id");

                    b.ToTable("dimension_graphical_image", (string)null);
                });

            modelBuilder.Entity("DimensionMagazine", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("DimensionsId", "MagazinesId")
                        .HasName("pk_dimension_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_dimension_magazine_magazines_id");

                    b.ToTable("dimension_magazine", (string)null);
                });

            modelBuilder.Entity("DimensionMicroform", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("MicroformsId")
                        .HasColumnType("uuid")
                        .HasColumnName("microforms_id");

                    b.HasKey("DimensionsId", "MicroformsId")
                        .HasName("pk_dimension_microform");

                    b.HasIndex("MicroformsId")
                        .HasDatabaseName("ix_dimension_microform_microforms_id");

                    b.ToTable("dimension_microform", (string)null);
                });

            modelBuilder.Entity("DimensionMusicalNote", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("MusicalNotesId")
                        .HasColumnType("uuid")
                        .HasColumnName("musical_notes_id");

                    b.HasKey("DimensionsId", "MusicalNotesId")
                        .HasName("pk_dimension_musical_note");

                    b.HasIndex("MusicalNotesId")
                        .HasDatabaseName("ix_dimension_musical_note_musical_notes_id");

                    b.ToTable("dimension_musical_note", (string)null);
                });

            modelBuilder.Entity("DimensionNewsPaper", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("DimensionsId", "NewsPapersId")
                        .HasName("pk_dimension_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_dimension_news_paper_news_papers_id");

                    b.ToTable("dimension_news_paper", (string)null);
                });

            modelBuilder.Entity("DimensionObject3D", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("Object3DsId")
                        .HasColumnType("uuid")
                        .HasColumnName("object3ds_id");

                    b.HasKey("DimensionsId", "Object3DsId")
                        .HasName("pk_dimension_object3d");

                    b.HasIndex("Object3DsId")
                        .HasDatabaseName("ix_dimension_object3d_object3ds_id");

                    b.ToTable("dimension_object3d", (string)null);
                });

            modelBuilder.Entity("DimensionPainting", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("PaintingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("paintings_id");

                    b.HasKey("DimensionsId", "PaintingsId")
                        .HasName("pk_dimension_painting");

                    b.HasIndex("PaintingsId")
                        .HasDatabaseName("ix_dimension_painting_paintings_id");

                    b.ToTable("dimension_painting", (string)null);
                });

            modelBuilder.Entity("DimensionPoster", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("PostersId")
                        .HasColumnType("uuid")
                        .HasColumnName("posters_id");

                    b.HasKey("DimensionsId", "PostersId")
                        .HasName("pk_dimension_poster");

                    b.HasIndex("PostersId")
                        .HasDatabaseName("ix_dimension_poster_posters_id");

                    b.ToTable("dimension_poster", (string)null);
                });

            modelBuilder.Entity("DimensionThesis", b =>
                {
                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid>("ThesesId")
                        .HasColumnType("uuid")
                        .HasColumnName("theses_id");

                    b.HasKey("DimensionsId", "ThesesId")
                        .HasName("pk_dimension_thesis");

                    b.HasIndex("ThesesId")
                        .HasDatabaseName("ix_dimension_thesis_theses_id");

                    b.ToTable("dimension_thesis", (string)null);
                });

            modelBuilder.Entity("DirectorEncyclopedia", b =>
                {
                    b.Property<Guid>("DirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("directors_id");

                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.HasKey("DirectorsId", "EncyclopediasId")
                        .HasName("pk_director_encyclopedia");

                    b.HasIndex("EncyclopediasId")
                        .HasDatabaseName("ix_director_encyclopedia_encyclopedias_id");

                    b.ToTable("director_encyclopedia", (string)null);
                });

            modelBuilder.Entity("DirectorMagazine", b =>
                {
                    b.Property<Guid>("DirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("directors_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("DirectorsId", "MagazinesId")
                        .HasName("pk_director_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_director_magazine_magazines_id");

                    b.ToTable("director_magazine", (string)null);
                });

            modelBuilder.Entity("DirectorNewsPaper", b =>
                {
                    b.Property<Guid>("DirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("directors_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("DirectorsId", "NewsPapersId")
                        .HasName("pk_director_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_director_news_paper_news_papers_id");

                    b.ToTable("director_news_paper", (string)null);
                });

            modelBuilder.Entity("DissertationEMaterialFile", b =>
                {
                    b.Property<Guid>("DissertationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dissertations_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("DissertationsId", "EMaterialFilesId")
                        .HasName("pk_dissertation_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_dissertation_e_material_file_e_material_files_id");

                    b.ToTable("dissertation_e_material_file", (string)null);
                });

            modelBuilder.Entity("DissertationKit", b =>
                {
                    b.Property<Guid>("DissertationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dissertations_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("DissertationsId", "KitsId")
                        .HasName("pk_dissertation_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_dissertation_kit_kits_id");

                    b.ToTable("dissertation_kit", (string)null);
                });

            modelBuilder.Entity("DissertationResearcher", b =>
                {
                    b.Property<Guid>("DissertationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dissertations_id");

                    b.Property<Guid>("ResearcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("researcher_id");

                    b.HasKey("DissertationsId", "ResearcherId")
                        .HasName("pk_dissertation_researcher");

                    b.HasIndex("ResearcherId")
                        .HasDatabaseName("ix_dissertation_researcher_researcher_id");

                    b.ToTable("dissertation_researcher", (string)null);
                });

            modelBuilder.Entity("DissertationTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("DissertationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dissertations_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("DissertationsId", "TechnicalPlaceholdersId")
                        .HasName("pk_dissertation_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_dissertation_technical_placeholder_technical_placeholders_id");

                    b.ToTable("dissertation_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("DissertationUniversity", b =>
                {
                    b.Property<Guid>("DissertationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dissertations_id");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasKey("DissertationsId", "UniversityId")
                        .HasName("pk_dissertation_university");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_dissertation_university_university_id");

                    b.ToTable("dissertation_university", (string)null);
                });

            modelBuilder.Entity("EditionEncyclopedia", b =>
                {
                    b.Property<Guid>("EditionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editions_id");

                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.HasKey("EditionsId", "EncyclopediasId")
                        .HasName("pk_edition_encyclopedia");

                    b.HasIndex("EncyclopediasId")
                        .HasDatabaseName("ix_edition_encyclopedia_encyclopedias_id");

                    b.ToTable("edition_encyclopedia", (string)null);
                });

            modelBuilder.Entity("EditionMagazine", b =>
                {
                    b.Property<Guid>("EditionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editions_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("EditionsId", "MagazinesId")
                        .HasName("pk_edition_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_edition_magazine_magazines_id");

                    b.ToTable("edition_magazine", (string)null);
                });

            modelBuilder.Entity("EditionNewsPaper", b =>
                {
                    b.Property<Guid>("EditionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editions_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("EditionsId", "NewsPapersId")
                        .HasName("pk_edition_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_edition_news_paper_news_papers_id");

                    b.ToTable("edition_news_paper", (string)null);
                });

            modelBuilder.Entity("EditorEncyclopedia", b =>
                {
                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editors_id");

                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.HasKey("EditorsId", "EncyclopediasId")
                        .HasName("pk_editor_encyclopedia");

                    b.HasIndex("EncyclopediasId")
                        .HasDatabaseName("ix_editor_encyclopedia_encyclopedias_id");

                    b.ToTable("editor_encyclopedia", (string)null);
                });

            modelBuilder.Entity("EditorMagazine", b =>
                {
                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editors_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("EditorsId", "MagazinesId")
                        .HasName("pk_editor_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_editor_magazine_magazines_id");

                    b.ToTable("editor_magazine", (string)null);
                });

            modelBuilder.Entity("EditorNewsPaper", b =>
                {
                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editors_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("EditorsId", "NewsPapersId")
                        .HasName("pk_editor_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_editor_news_paper_news_papers_id");

                    b.ToTable("editor_news_paper", (string)null);
                });

            modelBuilder.Entity("ElectronicsResourceKit", b =>
                {
                    b.Property<Guid>("ElectronicsResourcesId")
                        .HasColumnType("uuid")
                        .HasColumnName("electronics_resources_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("ElectronicsResourcesId", "KitsId")
                        .HasName("pk_electronics_resource_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_electronics_resource_kit_kits_id");

                    b.ToTable("electronics_resource_kit", (string)null);
                });

            modelBuilder.Entity("ElectronicsResourceTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("ElectronicsResourcesId")
                        .HasColumnType("uuid")
                        .HasColumnName("electronics_resources_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("ElectronicsResourcesId", "TechnicalPlaceholdersId")
                        .HasName("pk_electronics_resource_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_electronics_resource_technical_placeholder_technical_placeh");

                    b.ToTable("electronics_resource_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("EMaterialFileElectronicsResource", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("ElectronicsResourcesId")
                        .HasColumnType("uuid")
                        .HasColumnName("electronics_resources_id");

                    b.HasKey("EMaterialFilesId", "ElectronicsResourcesId")
                        .HasName("pk_e_material_file_electronics_resource");

                    b.HasIndex("ElectronicsResourcesId")
                        .HasDatabaseName("ix_e_material_file_electronics_resource_electronics_resources_");

                    b.ToTable("e_material_file_electronics_resource", (string)null);
                });

            modelBuilder.Entity("EMaterialFileEncyclopedia", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.HasKey("EMaterialFilesId", "EncyclopediasId")
                        .HasName("pk_e_material_file_encyclopedia");

                    b.HasIndex("EncyclopediasId")
                        .HasDatabaseName("ix_e_material_file_encyclopedia_encyclopedias_id");

                    b.ToTable("e_material_file_encyclopedia", (string)null);
                });

            modelBuilder.Entity("EMaterialFileGraphicalImage", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("GraphicalImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphical_images_id");

                    b.HasKey("EMaterialFilesId", "GraphicalImagesId")
                        .HasName("pk_e_material_file_graphical_image");

                    b.HasIndex("GraphicalImagesId")
                        .HasDatabaseName("ix_e_material_file_graphical_image_graphical_images_id");

                    b.ToTable("e_material_file_graphical_image", (string)null);
                });

            modelBuilder.Entity("EMaterialFileMagazine", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("EMaterialFilesId", "MagazinesId")
                        .HasName("pk_e_material_file_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_e_material_file_magazine_magazines_id");

                    b.ToTable("e_material_file_magazine", (string)null);
                });

            modelBuilder.Entity("EMaterialFileMicroform", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("MicroformsId")
                        .HasColumnType("uuid")
                        .HasColumnName("microforms_id");

                    b.HasKey("EMaterialFilesId", "MicroformsId")
                        .HasName("pk_e_material_file_microform");

                    b.HasIndex("MicroformsId")
                        .HasDatabaseName("ix_e_material_file_microform_microforms_id");

                    b.ToTable("e_material_file_microform", (string)null);
                });

            modelBuilder.Entity("EMaterialFileMusicalNote", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("MusicalNotesId")
                        .HasColumnType("uuid")
                        .HasColumnName("musical_notes_id");

                    b.HasKey("EMaterialFilesId", "MusicalNotesId")
                        .HasName("pk_e_material_file_musical_note");

                    b.HasIndex("MusicalNotesId")
                        .HasDatabaseName("ix_e_material_file_musical_note_musical_notes_id");

                    b.ToTable("e_material_file_musical_note", (string)null);
                });

            modelBuilder.Entity("EMaterialFileNewsPaper", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("EMaterialFilesId", "NewsPapersId")
                        .HasName("pk_e_material_file_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_e_material_file_news_paper_news_papers_id");

                    b.ToTable("e_material_file_news_paper", (string)null);
                });

            modelBuilder.Entity("EMaterialFileObject3D", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("Object3DsId")
                        .HasColumnType("uuid")
                        .HasColumnName("object3ds_id");

                    b.HasKey("EMaterialFilesId", "Object3DsId")
                        .HasName("pk_e_material_file_object3d");

                    b.HasIndex("Object3DsId")
                        .HasDatabaseName("ix_e_material_file_object3d_object3ds_id");

                    b.ToTable("e_material_file_object3d", (string)null);
                });

            modelBuilder.Entity("EMaterialFilePainting", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("PaintingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("paintings_id");

                    b.HasKey("EMaterialFilesId", "PaintingsId")
                        .HasName("pk_e_material_file_painting");

                    b.HasIndex("PaintingsId")
                        .HasDatabaseName("ix_e_material_file_painting_paintings_id");

                    b.ToTable("e_material_file_painting", (string)null);
                });

            modelBuilder.Entity("EMaterialFilePoster", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("PostersId")
                        .HasColumnType("uuid")
                        .HasColumnName("posters_id");

                    b.HasKey("EMaterialFilesId", "PostersId")
                        .HasName("pk_e_material_file_poster");

                    b.HasIndex("PostersId")
                        .HasDatabaseName("ix_e_material_file_poster_posters_id");

                    b.ToTable("e_material_file_poster", (string)null);
                });

            modelBuilder.Entity("EMaterialFileThesis", b =>
                {
                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("ThesesId")
                        .HasColumnType("uuid")
                        .HasColumnName("theses_id");

                    b.HasKey("EMaterialFilesId", "ThesesId")
                        .HasName("pk_e_material_file_thesis");

                    b.HasIndex("ThesesId")
                        .HasDatabaseName("ix_e_material_file_thesis_theses_id");

                    b.ToTable("e_material_file_thesis", (string)null);
                });

            modelBuilder.Entity("EncyclopediaGraphicDesigner", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("GraphicDesignsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_designs_id");

                    b.HasKey("EncyclopediasId", "GraphicDesignsId")
                        .HasName("pk_encyclopedia_graphic_designer");

                    b.HasIndex("GraphicDesignsId")
                        .HasDatabaseName("ix_encyclopedia_graphic_designer_graphic_designs_id");

                    b.ToTable("encyclopedia_graphic_designer", (string)null);
                });

            modelBuilder.Entity("EncyclopediaGraphicDirector", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("GraphicDirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_directors_id");

                    b.HasKey("EncyclopediasId", "GraphicDirectorsId")
                        .HasName("pk_encyclopedia_graphic_director");

                    b.HasIndex("GraphicDirectorsId")
                        .HasDatabaseName("ix_encyclopedia_graphic_director_graphic_directors_id");

                    b.ToTable("encyclopedia_graphic_director", (string)null);
                });

            modelBuilder.Entity("EncyclopediaImage", b =>
                {
                    b.Property<Guid>("CoverImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_images_id");

                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.HasKey("CoverImagesId", "EncyclopediasId")
                        .HasName("pk_encyclopedia_image");

                    b.HasIndex("EncyclopediasId")
                        .HasDatabaseName("ix_encyclopedia_image_encyclopedias_id");

                    b.ToTable("encyclopedia_image", (string)null);
                });

            modelBuilder.Entity("EncyclopediaInterpreters", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.HasKey("EncyclopediasId", "InterpretersId")
                        .HasName("pk_encyclopedia_interpreters");

                    b.HasIndex("InterpretersId")
                        .HasDatabaseName("ix_encyclopedia_interpreters_interpreters_id");

                    b.ToTable("encyclopedia_interpreters", (string)null);
                });

            modelBuilder.Entity("EncyclopediaKit", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("EncyclopediasId", "KitsId")
                        .HasName("pk_encyclopedia_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_encyclopedia_kit_kits_id");

                    b.ToTable("encyclopedia_kit", (string)null);
                });

            modelBuilder.Entity("EncyclopediaOtherPeople", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("OtherPeoplesId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_peoples_id");

                    b.HasKey("EncyclopediasId", "OtherPeoplesId")
                        .HasName("pk_encyclopedia_other_people");

                    b.HasIndex("OtherPeoplesId")
                        .HasDatabaseName("ix_encyclopedia_other_people_other_peoples_id");

                    b.ToTable("encyclopedia_other_people", (string)null);
                });

            modelBuilder.Entity("EncyclopediaRedaction", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("RedactionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("redactions_id");

                    b.HasKey("EncyclopediasId", "RedactionsId")
                        .HasName("pk_encyclopedia_redaction");

                    b.HasIndex("RedactionsId")
                        .HasDatabaseName("ix_encyclopedia_redaction_redactions_id");

                    b.ToTable("encyclopedia_redaction", (string)null);
                });

            modelBuilder.Entity("EncyclopediaTechnicalNumber", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("TechnicalNumbersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_numbers_id");

                    b.HasKey("EncyclopediasId", "TechnicalNumbersId")
                        .HasName("pk_encyclopedia_technical_number");

                    b.HasIndex("TechnicalNumbersId")
                        .HasDatabaseName("ix_encyclopedia_technical_number_technical_numbers_id");

                    b.ToTable("encyclopedia_technical_number", (string)null);
                });

            modelBuilder.Entity("EncyclopediaTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("EncyclopediasId", "TechnicalPlaceholdersId")
                        .HasName("pk_encyclopedia_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_encyclopedia_technical_placeholder_technical_placeholders_id");

                    b.ToTable("encyclopedia_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("EncyclopediaWriter", b =>
                {
                    b.Property<Guid>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid>("WritersId")
                        .HasColumnType("uuid")
                        .HasColumnName("writers_id");

                    b.HasKey("EncyclopediasId", "WritersId")
                        .HasName("pk_encyclopedia_writer");

                    b.HasIndex("WritersId")
                        .HasDatabaseName("ix_encyclopedia_writer_writers_id");

                    b.ToTable("encyclopedia_writer", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.AcademicJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AJNumber")
                        .HasColumnType("integer")
                        .HasColumnName("aj_number");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("DateOfYear")
                        .HasColumnType("integer")
                        .HasColumnName("date_of_year");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("editor_id");

                    b.Property<int>("EndPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("end_page_number");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("is_secret");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("reference_id");

                    b.Property<Guid>("ResearcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("researcher_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<int>("StartPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("start_page_number");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Volume")
                        .HasColumnType("integer")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_academic_journals");

                    b.ToTable("academic_journals", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.AudioRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_date");

                    b.Property<DateTime>("RecordEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_end_date");

                    b.Property<float>("RecordingLength")
                        .HasColumnType("real")
                        .HasColumnName("recording_length");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_audio_records");

                    b.ToTable("audio_records", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<byte>("CoverCapId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_cap_id");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("director_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("editor_id");

                    b.Property<Guid?>("GraphicDesignId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_design_id");

                    b.Property<Guid?>("GraphicDirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_director_id");

                    b.Property<Guid?>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OriginalBookName")
                        .HasColumnType("text")
                        .HasColumnName("original_book_name");

                    b.Property<Guid?>("OtherPeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_people_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("RedactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("redaction_id");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("reference_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_number_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid")
                        .HasColumnName("writer_id");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.BookSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<Guid>("BookIds")
                        .HasColumnType("uuid")
                        .HasColumnName("book_ids");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<byte>("CoverCapId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_cap_id");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("director_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("editor_id");

                    b.Property<Guid?>("GraphicDesignId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_design_id");

                    b.Property<Guid?>("GraphicDirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_director_id");

                    b.Property<Guid?>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OtherPeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_people_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("RedactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("redaction_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_number_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid")
                        .HasColumnName("writer_id");

                    b.HasKey("Id")
                        .HasName("pk_book_series");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_series_book_id");

                    b.ToTable("book_series", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.CartographicMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_cartographic_materials");

                    b.ToTable("cartographic_materials", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Depiction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_depictions");

                    b.HasIndex("ImageId")
                        .HasDatabaseName("ix_depictions_image_id");

                    b.ToTable("depictions", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Dissertation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("approval_status");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<int>("DateTimeYear")
                        .HasColumnType("integer")
                        .HasColumnName("date_time_year");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<int>("DissertationNumber")
                        .HasColumnType("integer")
                        .HasColumnName("dissertation_number");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("is_secret");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("PermissionStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("permission_status");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ResearcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("researcher_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasKey("Id")
                        .HasName("pk_dissertations");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_dissertations_city_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_dissertations_language_id");

                    b.ToTable("dissertations", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.ElectronicsResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ResourceUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resource_url");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_electronics_resources");

                    b.ToTable("electronics_resources", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Encyclopedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<byte>("CoverCapId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_cap_id");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("director_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("editor_id");

                    b.Property<Guid?>("GraphicDesignId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_design_id");

                    b.Property<Guid?>("GraphicDirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_director_id");

                    b.Property<Guid?>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OtherPeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_people_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("RedactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("redaction_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sequence_number");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_number_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid")
                        .HasColumnName("writer_id");

                    b.HasKey("Id")
                        .HasName("pk_encyclopedias");

                    b.ToTable("encyclopedias", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.GraphicalImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<DateTime>("ImageCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("image_created_date");

                    b.Property<bool>("IsDestroyed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_destroyed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_graphical_images");

                    b.ToTable("graphical_images", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_line2");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_name");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("GeoLocation")
                        .HasColumnType("text")
                        .HasColumnName("geo_location");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_addresses_city_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_addresses_country_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_branches");

                    b.ToTable("branches", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("KitId")
                        .HasColumnType("uuid")
                        .HasColumnName("kit_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("KitId")
                        .HasDatabaseName("ix_categories_kit_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_cities_country_id");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CommunicationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("communication_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("text")
                        .HasColumnName("fax_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("web_site");

                    b.HasKey("Id")
                        .HasName("pk_communications");

                    b.ToTable("communications", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Composer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NamePreAttachment")
                        .HasColumnType("text")
                        .HasColumnName("name_pre_attachment");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_composers");

                    b.ToTable("composers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Consultant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NamePreAttachment")
                        .HasColumnType("text")
                        .HasColumnName("name_pre_attachment");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_consultants");

                    b.ToTable("consultants", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.CoverCap", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("BookSkinType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("book_skin_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_cover_caps");

                    b.ToTable("cover_caps", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Dimension", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("KitId")
                        .HasColumnType("uuid")
                        .HasColumnName("kit_id");

                    b.Property<double>("Length")
                        .HasColumnType("double precision")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_dimensions");

                    b.HasIndex("KitId")
                        .HasDatabaseName("ix_dimensions_kit_id");

                    b.ToTable("dimensions", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_directors");

                    b.ToTable("directors", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Edition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("edition_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.HasKey("Id")
                        .HasName("pk_editions");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_editions_publisher_id");

                    b.ToTable("editions", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Editor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_editors");

                    b.ToTable("editors", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.EMaterialFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<double>("FileSizeMB")
                        .HasColumnType("double precision")
                        .HasColumnName("file_size_mb");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("is_secret");

                    b.Property<Guid?>("KitId")
                        .HasColumnType("uuid")
                        .HasColumnName("kit_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_e_material_files");

                    b.HasIndex("KitId")
                        .HasDatabaseName("ix_e_material_files_kit_id");

                    b.ToTable("e_material_files", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.GraphicDesigner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_graphic_design");

                    b.ToTable("graphic_design", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.GraphicDirector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_graphic_directors");

                    b.ToTable("graphic_directors", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Interpreters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.Property<string>("WhichToLanguage")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("which_to_language");

                    b.HasKey("Id")
                        .HasName("pk_interpreters");

                    b.ToTable("interpreters", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_name");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<Guid>("CommunicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("communication_id");

                    b.Property<bool>("IsDestroyed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_destroyed");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("library_name");

                    b.Property<byte>("LibraryType")
                        .HasColumnType("smallint")
                        .HasColumnName("library_type");

                    b.HasKey("Id")
                        .HasName("pk_libraries");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_libraries_address_id");

                    b.HasIndex("CommunicationId")
                        .HasDatabaseName("ix_libraries_communication_id");

                    b.ToTable("libraries", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.OtherPeople", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NamePreAttachment")
                        .HasColumnType("text")
                        .HasColumnName("name_pre_attachment");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_other_peoples");

                    b.ToTable("other_peoples", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<Guid>("CommunicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("communication_id");

                    b.Property<DateTime>("DateOfPublication")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_publication");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_publishers");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_publishers_address_id");

                    b.HasIndex("CommunicationId")
                        .HasDatabaseName("ix_publishers_communication_id");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Redaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_redactions");

                    b.ToTable("redactions", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Reference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("EndPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("end_page_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<DateOnly>("ReferenceDate")
                        .HasColumnType("date")
                        .HasColumnName("reference_date");

                    b.Property<int>("StartPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("start_page_number");

                    b.Property<string>("SubText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sub_text");

                    b.Property<Guid>("TechnicalNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_number_id");

                    b.HasKey("Id")
                        .HasName("pk_references");

                    b.HasIndex("TechnicalNumberId")
                        .HasDatabaseName("ix_references_technical_number_id");

                    b.ToTable("references", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Researcher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NamePreAttachment")
                        .HasColumnType("text")
                        .HasColumnName("name_pre_attachment");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialty");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasKey("Id")
                        .HasName("pk_researchers");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_researchers_university_id");

                    b.ToTable("researchers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.TechnicalNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Barcode")
                        .HasColumnType("bigint")
                        .HasColumnName("barcode");

                    b.Property<string>("CertificateCode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("certificate_code");

                    b.Property<decimal>("ISBN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("isbn");

                    b.Property<decimal?>("ISSN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("issn");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_technical_numbers");

                    b.ToTable("technical_numbers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.TechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("KitId")
                        .HasColumnType("uuid")
                        .HasColumnName("kit_id");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uuid")
                        .HasColumnName("library_id");

                    b.Property<string>("StockCode")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("stock_code");

                    b.Property<decimal>("StockNumber")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("stock_number");

                    b.Property<string>("WhereIsMaterial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("where_is_material");

                    b.HasKey("Id")
                        .HasName("pk_technical_placeholders");

                    b.HasIndex("KitId")
                        .HasDatabaseName("ix_technical_placeholders_kit_id");

                    b.HasIndex("LibraryId")
                        .HasDatabaseName("ix_technical_placeholders_library_id");

                    b.ToTable("technical_placeholders", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("branch_id");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institute");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("university_name");

                    b.HasKey("Id")
                        .HasName("pk_universities");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_universities_address_id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("ix_universities_branch_id");

                    b.ToTable("universities", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Writer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NamePreAttachment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_pre_attachment");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_writers");

                    b.ToTable("writers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Kit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid?>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<Guid?>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid?>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid?>("CartographicMaterialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("cartographic_materials_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("DepictionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("depictions_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("DissertationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dissertations_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid?>("ElectronicsResourcesId")
                        .HasColumnType("uuid")
                        .HasColumnName("electronics_resources_id");

                    b.Property<Guid?>("EncyclopediasId")
                        .HasColumnType("uuid")
                        .HasColumnName("encyclopedias_id");

                    b.Property<Guid?>("GraphicalImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphical_images_id");

                    b.Property<Guid?>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.Property<Guid?>("MicroformsId")
                        .HasColumnType("uuid")
                        .HasColumnName("microforms_id");

                    b.Property<Guid?>("MusicalNotesId")
                        .HasColumnType("uuid")
                        .HasColumnName("musical_notes_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.Property<Guid?>("Object3DsId")
                        .HasColumnType("uuid")
                        .HasColumnName("object3ds_id");

                    b.Property<Guid?>("PaintingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("paintings_id");

                    b.Property<Guid?>("PostersId")
                        .HasColumnType("uuid")
                        .HasColumnName("posters_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<Guid?>("ThesesId")
                        .HasColumnType("uuid")
                        .HasColumnName("theses_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_kits");

                    b.ToTable("kits", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Magazine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<byte>("CoverCapId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_cap_id");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("director_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("editor_id");

                    b.Property<Guid?>("GraphicDesignId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_design_id");

                    b.Property<Guid?>("GraphicDirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_director_id");

                    b.Property<Guid?>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<byte>("MagazineType")
                        .HasColumnType("smallint")
                        .HasColumnName("magazine_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OtherPeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_people_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("RedactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("redaction_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_number_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid")
                        .HasColumnName("writer_id");

                    b.HasKey("Id")
                        .HasName("pk_magazines");

                    b.ToTable("magazines", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Microform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Scale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scale");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_microforms");

                    b.ToTable("microforms", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.MusicalNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<Guid>("ComposerId")
                        .HasColumnType("uuid")
                        .HasColumnName("composer_id");

                    b.Property<DateTime>("DateOfWriting")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_writing");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("is_secret");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_musical_notes");

                    b.ToTable("musical_notes", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.NewsPaper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<byte>("CoverCapId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_cap_id");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("director_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("editor_id");

                    b.Property<Guid?>("GraphicDesignId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_design_id");

                    b.Property<Guid?>("GraphicDirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_director_id");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<Guid?>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDestroyed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_destroyed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NewsPaperName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("news_paper_name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<Guid?>("OtherPeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_people_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("RedactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("redaction_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_number_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid")
                        .HasColumnName("writer_id");

                    b.HasKey("Id")
                        .HasName("pk_news_papers");

                    b.ToTable("news_papers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Object3D", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsDestroyed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_destroyed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_object3ds");

                    b.ToTable("object3ds", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Painting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsDestroyed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_destroyed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_paintings");

                    b.HasIndex("ImageId")
                        .HasDatabaseName("ix_paintings_image_id");

                    b.ToTable("paintings", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Poster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsDestroyed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_destroyed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_posters");

                    b.ToTable("posters", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Thesis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("approval_status");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid")
                        .HasColumnName("consultant_id");

                    b.Property<int>("DateTimeYear")
                        .HasColumnType("integer")
                        .HasColumnName("date_time_year");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("is_secret");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("PermissionStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("permission_status");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ResearcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("researcher_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<byte>("ThesisDegree")
                        .HasColumnType("smallint")
                        .HasColumnName("thesis_degree");

                    b.Property<int>("ThesisNumber")
                        .HasColumnType("integer")
                        .HasColumnName("thesis_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasKey("Id")
                        .HasName("pk_theses");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_theses_city_id");

                    b.HasIndex("ConsultantId")
                        .HasDatabaseName("ix_theses_consultant_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_theses_language_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_theses_university_id");

                    b.ToTable("theses", (string)null);
                });

            modelBuilder.Entity("GraphicalImageKit", b =>
                {
                    b.Property<Guid>("GraphicalImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphical_images_id");

                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.HasKey("GraphicalImagesId", "KitsId")
                        .HasName("pk_graphical_image_kit");

                    b.HasIndex("KitsId")
                        .HasDatabaseName("ix_graphical_image_kit_kits_id");

                    b.ToTable("graphical_image_kit", (string)null);
                });

            modelBuilder.Entity("GraphicalImageTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("GraphicalImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphical_images_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("GraphicalImagesId", "TechnicalPlaceholdersId")
                        .HasName("pk_graphical_image_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_graphical_image_technical_placeholder_technical_placeholder");

                    b.ToTable("graphical_image_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("GraphicDesignerMagazine", b =>
                {
                    b.Property<Guid>("GraphicDesignsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_designs_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("GraphicDesignsId", "MagazinesId")
                        .HasName("pk_graphic_designer_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_graphic_designer_magazine_magazines_id");

                    b.ToTable("graphic_designer_magazine", (string)null);
                });

            modelBuilder.Entity("GraphicDesignerNewsPaper", b =>
                {
                    b.Property<Guid>("GraphicDesignsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_designs_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("GraphicDesignsId", "NewsPapersId")
                        .HasName("pk_graphic_designer_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_graphic_designer_news_paper_news_papers_id");

                    b.ToTable("graphic_designer_news_paper", (string)null);
                });

            modelBuilder.Entity("GraphicDirectorMagazine", b =>
                {
                    b.Property<Guid>("GraphicDirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_directors_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("GraphicDirectorsId", "MagazinesId")
                        .HasName("pk_graphic_director_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_graphic_director_magazine_magazines_id");

                    b.ToTable("graphic_director_magazine", (string)null);
                });

            modelBuilder.Entity("GraphicDirectorNewsPaper", b =>
                {
                    b.Property<Guid>("GraphicDirectorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("graphic_directors_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("GraphicDirectorsId", "NewsPapersId")
                        .HasName("pk_graphic_director_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_graphic_director_news_paper_news_papers_id");

                    b.ToTable("graphic_director_news_paper", (string)null);
                });

            modelBuilder.Entity("ImageMagazine", b =>
                {
                    b.Property<Guid>("CoverImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_images_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("CoverImagesId", "MagazinesId")
                        .HasName("pk_image_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_image_magazine_magazines_id");

                    b.ToTable("image_magazine", (string)null);
                });

            modelBuilder.Entity("ImageNewsPaper", b =>
                {
                    b.Property<Guid>("CoverImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_images_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("CoverImagesId", "NewsPapersId")
                        .HasName("pk_image_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_image_news_paper_news_papers_id");

                    b.ToTable("image_news_paper", (string)null);
                });

            modelBuilder.Entity("ImageObject3D", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("images_id");

                    b.Property<Guid>("Object3DsId")
                        .HasColumnType("uuid")
                        .HasColumnName("object3ds_id");

                    b.HasKey("ImagesId", "Object3DsId")
                        .HasName("pk_image_object3d");

                    b.HasIndex("Object3DsId")
                        .HasDatabaseName("ix_image_object3d_object3ds_id");

                    b.ToTable("image_object3d", (string)null);
                });

            modelBuilder.Entity("ImagePoster", b =>
                {
                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<Guid>("PostersId")
                        .HasColumnType("uuid")
                        .HasColumnName("posters_id");

                    b.HasKey("ImageId", "PostersId")
                        .HasName("pk_image_poster");

                    b.HasIndex("PostersId")
                        .HasDatabaseName("ix_image_poster_posters_id");

                    b.ToTable("image_poster", (string)null);
                });

            modelBuilder.Entity("InterpretersMagazine", b =>
                {
                    b.Property<Guid>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("InterpretersId", "MagazinesId")
                        .HasName("pk_interpreters_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_interpreters_magazine_magazines_id");

                    b.ToTable("interpreters_magazine", (string)null);
                });

            modelBuilder.Entity("InterpretersNewsPaper", b =>
                {
                    b.Property<Guid>("InterpretersId")
                        .HasColumnType("uuid")
                        .HasColumnName("interpreters_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("InterpretersId", "NewsPapersId")
                        .HasName("pk_interpreters_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_interpreters_news_paper_news_papers_id");

                    b.ToTable("interpreters_news_paper", (string)null);
                });

            modelBuilder.Entity("KitMagazine", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.HasKey("KitsId", "MagazinesId")
                        .HasName("pk_kit_magazine");

                    b.HasIndex("MagazinesId")
                        .HasDatabaseName("ix_kit_magazine_magazines_id");

                    b.ToTable("kit_magazine", (string)null);
                });

            modelBuilder.Entity("KitMicroform", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.Property<Guid>("MicroformsId")
                        .HasColumnType("uuid")
                        .HasColumnName("microforms_id");

                    b.HasKey("KitsId", "MicroformsId")
                        .HasName("pk_kit_microform");

                    b.HasIndex("MicroformsId")
                        .HasDatabaseName("ix_kit_microform_microforms_id");

                    b.ToTable("kit_microform", (string)null);
                });

            modelBuilder.Entity("KitMusicalNote", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.Property<Guid>("MusicalNotesId")
                        .HasColumnType("uuid")
                        .HasColumnName("musical_notes_id");

                    b.HasKey("KitsId", "MusicalNotesId")
                        .HasName("pk_kit_musical_note");

                    b.HasIndex("MusicalNotesId")
                        .HasDatabaseName("ix_kit_musical_note_musical_notes_id");

                    b.ToTable("kit_musical_note", (string)null);
                });

            modelBuilder.Entity("KitNewsPaper", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.HasKey("KitsId", "NewsPapersId")
                        .HasName("pk_kit_news_paper");

                    b.HasIndex("NewsPapersId")
                        .HasDatabaseName("ix_kit_news_paper_news_papers_id");

                    b.ToTable("kit_news_paper", (string)null);
                });

            modelBuilder.Entity("KitObject3D", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.Property<Guid>("Object3DsId")
                        .HasColumnType("uuid")
                        .HasColumnName("object3ds_id");

                    b.HasKey("KitsId", "Object3DsId")
                        .HasName("pk_kit_object3d");

                    b.HasIndex("Object3DsId")
                        .HasDatabaseName("ix_kit_object3d_object3ds_id");

                    b.ToTable("kit_object3d", (string)null);
                });

            modelBuilder.Entity("KitPainting", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.Property<Guid>("PaintingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("paintings_id");

                    b.HasKey("KitsId", "PaintingsId")
                        .HasName("pk_kit_painting");

                    b.HasIndex("PaintingsId")
                        .HasDatabaseName("ix_kit_painting_paintings_id");

                    b.ToTable("kit_painting", (string)null);
                });

            modelBuilder.Entity("KitPoster", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.Property<Guid>("PostersId")
                        .HasColumnType("uuid")
                        .HasColumnName("posters_id");

                    b.HasKey("KitsId", "PostersId")
                        .HasName("pk_kit_poster");

                    b.HasIndex("PostersId")
                        .HasDatabaseName("ix_kit_poster_posters_id");

                    b.ToTable("kit_poster", (string)null);
                });

            modelBuilder.Entity("KitThesis", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uuid")
                        .HasColumnName("kits_id");

                    b.Property<Guid>("ThesesId")
                        .HasColumnType("uuid")
                        .HasColumnName("theses_id");

                    b.HasKey("KitsId", "ThesesId")
                        .HasName("pk_kit_thesis");

                    b.HasIndex("ThesesId")
                        .HasDatabaseName("ix_kit_thesis_theses_id");

                    b.ToTable("kit_thesis", (string)null);
                });

            modelBuilder.Entity("MagazineOtherPeople", b =>
                {
                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.Property<Guid>("OtherPeoplesId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_peoples_id");

                    b.HasKey("MagazinesId", "OtherPeoplesId")
                        .HasName("pk_magazine_other_people");

                    b.HasIndex("OtherPeoplesId")
                        .HasDatabaseName("ix_magazine_other_people_other_peoples_id");

                    b.ToTable("magazine_other_people", (string)null);
                });

            modelBuilder.Entity("MagazineRedaction", b =>
                {
                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.Property<Guid>("RedactionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("redactions_id");

                    b.HasKey("MagazinesId", "RedactionsId")
                        .HasName("pk_magazine_redaction");

                    b.HasIndex("RedactionsId")
                        .HasDatabaseName("ix_magazine_redaction_redactions_id");

                    b.ToTable("magazine_redaction", (string)null);
                });

            modelBuilder.Entity("MagazineTechnicalNumber", b =>
                {
                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.Property<Guid>("TechnicalNumbersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_numbers_id");

                    b.HasKey("MagazinesId", "TechnicalNumbersId")
                        .HasName("pk_magazine_technical_number");

                    b.HasIndex("TechnicalNumbersId")
                        .HasDatabaseName("ix_magazine_technical_number_technical_numbers_id");

                    b.ToTable("magazine_technical_number", (string)null);
                });

            modelBuilder.Entity("MagazineTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("MagazinesId", "TechnicalPlaceholdersId")
                        .HasName("pk_magazine_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_magazine_technical_placeholder_technical_placeholders_id");

                    b.ToTable("magazine_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("MagazineWriter", b =>
                {
                    b.Property<Guid>("MagazinesId")
                        .HasColumnType("uuid")
                        .HasColumnName("magazines_id");

                    b.Property<Guid>("WritersId")
                        .HasColumnType("uuid")
                        .HasColumnName("writers_id");

                    b.HasKey("MagazinesId", "WritersId")
                        .HasName("pk_magazine_writer");

                    b.HasIndex("WritersId")
                        .HasDatabaseName("ix_magazine_writer_writers_id");

                    b.ToTable("magazine_writer", (string)null);
                });

            modelBuilder.Entity("MicroformTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("MicroformsId")
                        .HasColumnType("uuid")
                        .HasColumnName("microforms_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("MicroformsId", "TechnicalPlaceholdersId")
                        .HasName("pk_microform_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_microform_technical_placeholder_technical_placeholders_id");

                    b.ToTable("microform_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("MusicalNoteTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("MusicalNotesId")
                        .HasColumnType("uuid")
                        .HasColumnName("musical_notes_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("MusicalNotesId", "TechnicalPlaceholdersId")
                        .HasName("pk_musical_note_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_musical_note_technical_placeholder_technical_placeholders_id");

                    b.ToTable("musical_note_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("NewsPaperOtherPeople", b =>
                {
                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.Property<Guid>("OtherPeoplesId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_peoples_id");

                    b.HasKey("NewsPapersId", "OtherPeoplesId")
                        .HasName("pk_news_paper_other_people");

                    b.HasIndex("OtherPeoplesId")
                        .HasDatabaseName("ix_news_paper_other_people_other_peoples_id");

                    b.ToTable("news_paper_other_people", (string)null);
                });

            modelBuilder.Entity("NewsPaperRedaction", b =>
                {
                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.Property<Guid>("RedactionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("redactions_id");

                    b.HasKey("NewsPapersId", "RedactionsId")
                        .HasName("pk_news_paper_redaction");

                    b.HasIndex("RedactionsId")
                        .HasDatabaseName("ix_news_paper_redaction_redactions_id");

                    b.ToTable("news_paper_redaction", (string)null);
                });

            modelBuilder.Entity("NewsPaperTechnicalNumber", b =>
                {
                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.Property<Guid>("TechnicalNumbersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_numbers_id");

                    b.HasKey("NewsPapersId", "TechnicalNumbersId")
                        .HasName("pk_news_paper_technical_number");

                    b.HasIndex("TechnicalNumbersId")
                        .HasDatabaseName("ix_news_paper_technical_number_technical_numbers_id");

                    b.ToTable("news_paper_technical_number", (string)null);
                });

            modelBuilder.Entity("NewsPaperTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("NewsPapersId", "TechnicalPlaceholdersId")
                        .HasName("pk_news_paper_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_news_paper_technical_placeholder_technical_placeholders_id");

                    b.ToTable("news_paper_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("NewsPaperWriter", b =>
                {
                    b.Property<Guid>("NewsPapersId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_papers_id");

                    b.Property<Guid>("WritersId")
                        .HasColumnType("uuid")
                        .HasColumnName("writers_id");

                    b.HasKey("NewsPapersId", "WritersId")
                        .HasName("pk_news_paper_writer");

                    b.HasIndex("WritersId")
                        .HasDatabaseName("ix_news_paper_writer_writers_id");

                    b.ToTable("news_paper_writer", (string)null);
                });

            modelBuilder.Entity("Object3DTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("Object3DsId")
                        .HasColumnType("uuid")
                        .HasColumnName("object3ds_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("Object3DsId", "TechnicalPlaceholdersId")
                        .HasName("pk_object3d_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_object3d_technical_placeholder_technical_placeholders_id");

                    b.ToTable("object3d_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("PaintingTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("PaintingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("paintings_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("PaintingsId", "TechnicalPlaceholdersId")
                        .HasName("pk_painting_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_painting_technical_placeholder_technical_placeholders_id");

                    b.ToTable("painting_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("PosterTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("PostersId")
                        .HasColumnType("uuid")
                        .HasColumnName("posters_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("PostersId", "TechnicalPlaceholdersId")
                        .HasName("pk_poster_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_poster_technical_placeholder_technical_placeholders_id");

                    b.ToTable("poster_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("TechnicalPlaceholderThesis", b =>
                {
                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<Guid>("ThesesId")
                        .HasColumnType("uuid")
                        .HasColumnName("theses_id");

                    b.HasKey("TechnicalPlaceholdersId", "ThesesId")
                        .HasName("pk_technical_placeholder_thesis");

                    b.HasIndex("ThesesId")
                        .HasDatabaseName("ix_technical_placeholder_thesis_theses_id");

                    b.ToTable("technical_placeholder_thesis", (string)null);
                });

            modelBuilder.Entity("AcademicJournalCategory", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_category_academic_journals_academic_journa");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_category_categories_categories_id");
                });

            modelBuilder.Entity("AcademicJournalDimension", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_dimension_academic_journals_academic_journ");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("AcademicJournalEditor", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_editor_academic_journals_academic_journals");

                    b.HasOne("Entities.Concrete.Infos.Editor", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_editor_editors_editors_id");
                });

            modelBuilder.Entity("AcademicJournalEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_e_material_file_academic_journals_academic");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_e_material_file_e_material_files_e_materia");
                });

            modelBuilder.Entity("AcademicJournalKit", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_kit_academic_journals_academic_journals_id");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_kit_kits_kits_id");
                });

            modelBuilder.Entity("AcademicJournalPublisher", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_publisher_academic_journals_academic_journ");

                    b.HasOne("Entities.Concrete.Infos.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_publisher_publishers_publishers_id");
                });

            modelBuilder.Entity("AcademicJournalReference", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_reference_academic_journals_academic_journ");

                    b.HasOne("Entities.Concrete.Infos.Reference", null)
                        .WithMany()
                        .HasForeignKey("ReferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_reference_references_references_id");
                });

            modelBuilder.Entity("AcademicJournalResearcher", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_researcher_academic_journals_academic_jour");

                    b.HasOne("Entities.Concrete.Infos.Researcher", null)
                        .WithMany()
                        .HasForeignKey("ResearchersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_researcher_researchers_researchers_id");
                });

            modelBuilder.Entity("AcademicJournalTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_technical_placeholder_academic_journals_ac");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_technical_placeholder_technical_placeholde");
                });

            modelBuilder.Entity("AudioRecordCategory", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany()
                        .HasForeignKey("AudioRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_category_audio_records_audio_records_id");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_category_categories_categories_id");
                });

            modelBuilder.Entity("AudioRecordDimension", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany()
                        .HasForeignKey("AudioRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_dimension_audio_records_audio_records_id");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("AudioRecordEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany()
                        .HasForeignKey("AudioRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_e_material_file_audio_records_audio_records_id");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_e_material_file_e_material_files_e_material_fi");
                });

            modelBuilder.Entity("AudioRecordKit", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany()
                        .HasForeignKey("AudioRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_kit_audio_records_audio_records_id");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_kit_kits_kits_id");
                });

            modelBuilder.Entity("AudioRecordTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany()
                        .HasForeignKey("AudioRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_technical_placeholder_audio_records_audio_reco");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_technical_placeholder_technical_placeholders_t");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_category_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_category_categories_categories_id");
                });

            modelBuilder.Entity("BookCoverCap", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_cover_cap_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.CoverCap", null)
                        .WithMany()
                        .HasForeignKey("CoverCapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_cover_cap_cover_caps_cover_caps_id");
                });

            modelBuilder.Entity("BookDimension", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_dimension_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("BookDirector", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_director_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_director_directors_directors_id");
                });

            modelBuilder.Entity("BookEdition", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_edition_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_edition_editions_editions_id");
                });

            modelBuilder.Entity("BookEditor", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_editor_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Editor", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_editor_editors_editors_id");
                });

            modelBuilder.Entity("BookEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_e_material_file_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_e_material_file_e_material_files_e_material_files_id");
                });

            modelBuilder.Entity("BookGraphicDesigner", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_graphic_designer_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.GraphicDesigner", null)
                        .WithMany()
                        .HasForeignKey("GraphicDesignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_graphic_designer_graphic_design_graphic_designs_id");
                });

            modelBuilder.Entity("BookGraphicDirector", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_graphic_director_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.GraphicDirector", null)
                        .WithMany()
                        .HasForeignKey("GraphicDirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_graphic_director_graphic_directors_graphic_directors_id");
                });

            modelBuilder.Entity("BookImage", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_image_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("CoverImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_image_images_cover_images_id");
                });

            modelBuilder.Entity("BookInterpreters", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_interpreters_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Interpreters", null)
                        .WithMany()
                        .HasForeignKey("InterpretersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_interpreters_interpreters_interpreters_id");
                });

            modelBuilder.Entity("BookKit", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_kit_books_books_id");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_kit_kits_kits_id");
                });

            modelBuilder.Entity("BookOtherPeople", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_other_people_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.OtherPeople", null)
                        .WithMany()
                        .HasForeignKey("OtherPeoplesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_other_people_other_peoples_other_peoples_id");
                });

            modelBuilder.Entity("BookRedaction", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_redaction_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Redaction", null)
                        .WithMany()
                        .HasForeignKey("RedactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_redaction_redactions_redactions_id");
                });

            modelBuilder.Entity("BookReference", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_reference_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Reference", null)
                        .WithMany()
                        .HasForeignKey("ReferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_reference_references_references_id");
                });

            modelBuilder.Entity("BookSeriesCategory", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_category_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_category_categories_categories_id");
                });

            modelBuilder.Entity("BookSeriesCoverCap", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_cover_cap_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.CoverCap", null)
                        .WithMany()
                        .HasForeignKey("CoverCapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_cover_cap_cover_caps_cover_caps_id");
                });

            modelBuilder.Entity("BookSeriesDimension", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_dimension_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("BookSeriesDirector", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_director_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_director_directors_directors_id");
                });

            modelBuilder.Entity("BookSeriesEdition", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_edition_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_edition_editions_editions_id");
                });

            modelBuilder.Entity("BookSeriesEditor", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_editor_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Editor", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_editor_editors_editors_id");
                });

            modelBuilder.Entity("BookSeriesEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_e_material_file_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_e_material_file_e_material_files_e_material_fil");
                });

            modelBuilder.Entity("BookSeriesGraphicDesigner", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_graphic_designer_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.GraphicDesigner", null)
                        .WithMany()
                        .HasForeignKey("GraphicDesignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_graphic_designer_graphic_design_graphic_designs");
                });

            modelBuilder.Entity("BookSeriesGraphicDirector", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_graphic_director_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.GraphicDirector", null)
                        .WithMany()
                        .HasForeignKey("GraphicDirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_graphic_director_graphic_directors_graphic_dire");
                });

            modelBuilder.Entity("BookSeriesImage", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_image_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("CoverImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_image_images_cover_images_id");
                });

            modelBuilder.Entity("BookSeriesInterpreters", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_interpreters_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Interpreters", null)
                        .WithMany()
                        .HasForeignKey("InterpretersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_interpreters_interpreters_interpreters_id");
                });

            modelBuilder.Entity("BookSeriesKit", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_kit_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_kit_kits_kits_id");
                });

            modelBuilder.Entity("BookSeriesOtherPeople", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_other_people_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.OtherPeople", null)
                        .WithMany()
                        .HasForeignKey("OtherPeoplesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_other_people_other_peoples_other_peoples_id");
                });

            modelBuilder.Entity("BookSeriesRedaction", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_redaction_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Redaction", null)
                        .WithMany()
                        .HasForeignKey("RedactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_redaction_redactions_redactions_id");
                });

            modelBuilder.Entity("BookSeriesTechnicalNumber", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_technical_number_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalNumber", null)
                        .WithMany()
                        .HasForeignKey("TechnicalNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_technical_number_technical_numbers_technical_nu");
                });

            modelBuilder.Entity("BookSeriesTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_technical_placeholder_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_technical_placeholder_technical_placeholders_te");
                });

            modelBuilder.Entity("BookSeriesWriter", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_writer_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_writer_writers_writers_id");
                });

            modelBuilder.Entity("BookTechnicalNumber", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_technical_number_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalNumber", null)
                        .WithMany()
                        .HasForeignKey("TechnicalNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_technical_number_technical_numbers_technical_numbers_id");
                });

            modelBuilder.Entity("BookTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_technical_placeholder_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_technical_placeholder_technical_placeholders_technical");
                });

            modelBuilder.Entity("BookWriter", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_writer_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_writer_writers_writers_id");
                });

            modelBuilder.Entity("CartographicMaterialCategory", b =>
                {
                    b.HasOne("Entities.Concrete.CartographicMaterial", null)
                        .WithMany()
                        .HasForeignKey("CartographicMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_category_cartographic_materials_carto");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_category_categories_categories_id");
                });

            modelBuilder.Entity("CartographicMaterialDimension", b =>
                {
                    b.HasOne("Entities.Concrete.CartographicMaterial", null)
                        .WithMany()
                        .HasForeignKey("CartographicMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_dimension_cartographic_materials_cart");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("CartographicMaterialEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.CartographicMaterial", null)
                        .WithMany()
                        .HasForeignKey("CartographicMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_e_material_file_cartographic_material");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_e_material_file_e_material_files_e_ma");
                });

            modelBuilder.Entity("CartographicMaterialImage", b =>
                {
                    b.HasOne("Entities.Concrete.CartographicMaterial", null)
                        .WithMany()
                        .HasForeignKey("CartographicMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_image_cartographic_materials_cartogra");

                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_image_images_images_id");
                });

            modelBuilder.Entity("CartographicMaterialKit", b =>
                {
                    b.HasOne("Entities.Concrete.CartographicMaterial", null)
                        .WithMany()
                        .HasForeignKey("CartographicMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_kit_cartographic_materials_cartograph");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_kit_kits_kits_id");
                });

            modelBuilder.Entity("CartographicMaterialTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.CartographicMaterial", null)
                        .WithMany()
                        .HasForeignKey("CartographicMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_technical_placeholder_cartographic_ma");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartographic_material_technical_placeholder_technical_place");
                });

            modelBuilder.Entity("CategoryDepiction", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_depiction_categories_categories_id");

                    b.HasOne("Entities.Concrete.Depiction", null)
                        .WithMany()
                        .HasForeignKey("DepictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_depiction_depictions_depictions_id");
                });

            modelBuilder.Entity("CategoryDissertation", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_dissertation_categories_categories_id");

                    b.HasOne("Entities.Concrete.Dissertation", null)
                        .WithMany()
                        .HasForeignKey("DissertationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_dissertation_dissertations_dissertations_id");
                });

            modelBuilder.Entity("CategoryElectronicsResource", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_electronics_resource_categories_categories_id");

                    b.HasOne("Entities.Concrete.ElectronicsResource", null)
                        .WithMany()
                        .HasForeignKey("ElectronicsResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_electronics_resource_electronics_resources_electro");
                });

            modelBuilder.Entity("CategoryEncyclopedia", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_encyclopedia_categories_categories_id");

                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_encyclopedia_encyclopedias_encyclopedias_id");
                });

            modelBuilder.Entity("CategoryGraphicalImage", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_graphical_image_categories_categories_id");

                    b.HasOne("Entities.Concrete.GraphicalImage", null)
                        .WithMany()
                        .HasForeignKey("GraphicalImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_graphical_image_graphical_images_graphical_images_");
                });

            modelBuilder.Entity("CategoryMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_magazine_categories_categories_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("CategoryMicroform", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_microform_categories_categories_id");

                    b.HasOne("Entities.Concrete.Microform", null)
                        .WithMany()
                        .HasForeignKey("MicroformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_microform_microforms_microforms_id");
                });

            modelBuilder.Entity("CategoryMusicalNote", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_musical_note_categories_categories_id");

                    b.HasOne("Entities.Concrete.MusicalNote", null)
                        .WithMany()
                        .HasForeignKey("MusicalNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_musical_note_musical_notes_musical_notes_id");
                });

            modelBuilder.Entity("CategoryNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_news_paper_categories_categories_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("CategoryObject3D", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_object3d_categories_categories_id");

                    b.HasOne("Entities.Concrete.Object3D", null)
                        .WithMany()
                        .HasForeignKey("Object3DsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_object3d_object3ds_object3ds_id");
                });

            modelBuilder.Entity("CategoryPainting", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_painting_categories_categories_id");

                    b.HasOne("Entities.Concrete.Painting", null)
                        .WithMany()
                        .HasForeignKey("PaintingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_painting_paintings_paintings_id");
                });

            modelBuilder.Entity("CategoryPoster", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_poster_categories_categories_id");

                    b.HasOne("Entities.Concrete.Poster", null)
                        .WithMany()
                        .HasForeignKey("PostersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_poster_posters_posters_id");
                });

            modelBuilder.Entity("CategoryThesis", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_thesis_categories_categories_id");

                    b.HasOne("Entities.Concrete.Thesis", null)
                        .WithMany()
                        .HasForeignKey("ThesesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_thesis_theses_theses_id");
                });

            modelBuilder.Entity("ComposerMusicalNote", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Composer", null)
                        .WithMany()
                        .HasForeignKey("ComposersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_composer_musical_note_composers_composers_id");

                    b.HasOne("Entities.Concrete.MusicalNote", null)
                        .WithMany()
                        .HasForeignKey("MusicalNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_composer_musical_note_musical_notes_musical_notes_id");
                });

            modelBuilder.Entity("CoverCapEncyclopedia", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.CoverCap", null)
                        .WithMany()
                        .HasForeignKey("CoverCapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cover_cap_encyclopedia_cover_caps_cover_caps_id");

                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cover_cap_encyclopedia_encyclopedias_encyclopedias_id");
                });

            modelBuilder.Entity("CoverCapMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.CoverCap", null)
                        .WithMany()
                        .HasForeignKey("CoverCapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cover_cap_magazine_cover_caps_cover_caps_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cover_cap_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("CoverCapNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.CoverCap", null)
                        .WithMany()
                        .HasForeignKey("CoverCapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cover_cap_news_paper_cover_caps_cover_caps_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cover_cap_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("DepictionDimension", b =>
                {
                    b.HasOne("Entities.Concrete.Depiction", null)
                        .WithMany()
                        .HasForeignKey("DepictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depiction_dimension_depictions_depictions_id");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depiction_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("DepictionEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.Depiction", null)
                        .WithMany()
                        .HasForeignKey("DepictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depiction_e_material_file_depictions_depictions_id");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depiction_e_material_file_e_material_files_e_material_files");
                });

            modelBuilder.Entity("DepictionKit", b =>
                {
                    b.HasOne("Entities.Concrete.Depiction", null)
                        .WithMany()
                        .HasForeignKey("DepictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depiction_kit_depictions_depictions_id");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depiction_kit_kits_kits_id");
                });

            modelBuilder.Entity("DepictionTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Depiction", null)
                        .WithMany()
                        .HasForeignKey("DepictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depiction_technical_placeholder_depictions_depictions_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depiction_technical_placeholder_technical_placeholders_tech");
                });

            modelBuilder.Entity("DimensionDissertation", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_dissertation_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.Dissertation", null)
                        .WithMany()
                        .HasForeignKey("DissertationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_dissertation_dissertations_dissertations_id");
                });

            modelBuilder.Entity("DimensionElectronicsResource", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_electronics_resource_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.ElectronicsResource", null)
                        .WithMany()
                        .HasForeignKey("ElectronicsResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_electronics_resource_electronics_resources_electr");
                });

            modelBuilder.Entity("DimensionEncyclopedia", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_encyclopedia_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_encyclopedia_encyclopedias_encyclopedias_id");
                });

            modelBuilder.Entity("DimensionGraphicalImage", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_graphical_image_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.GraphicalImage", null)
                        .WithMany()
                        .HasForeignKey("GraphicalImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_graphical_image_graphical_images_graphical_images");
                });

            modelBuilder.Entity("DimensionMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_magazine_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("DimensionMicroform", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_microform_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.Microform", null)
                        .WithMany()
                        .HasForeignKey("MicroformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_microform_microforms_microforms_id");
                });

            modelBuilder.Entity("DimensionMusicalNote", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_musical_note_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.MusicalNote", null)
                        .WithMany()
                        .HasForeignKey("MusicalNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_musical_note_musical_notes_musical_notes_id");
                });

            modelBuilder.Entity("DimensionNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_news_paper_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("DimensionObject3D", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_object3d_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.Object3D", null)
                        .WithMany()
                        .HasForeignKey("Object3DsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_object3d_object3ds_object3ds_id");
                });

            modelBuilder.Entity("DimensionPainting", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_painting_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.Painting", null)
                        .WithMany()
                        .HasForeignKey("PaintingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_painting_paintings_paintings_id");
                });

            modelBuilder.Entity("DimensionPoster", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_poster_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.Poster", null)
                        .WithMany()
                        .HasForeignKey("PostersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_poster_posters_posters_id");
                });

            modelBuilder.Entity("DimensionThesis", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_thesis_dimensions_dimensions_id");

                    b.HasOne("Entities.Concrete.Thesis", null)
                        .WithMany()
                        .HasForeignKey("ThesesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dimension_thesis_theses_theses_id");
                });

            modelBuilder.Entity("DirectorEncyclopedia", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_director_encyclopedia_directors_directors_id");

                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_director_encyclopedia_encyclopedias_encyclopedias_id");
                });

            modelBuilder.Entity("DirectorMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_director_magazine_directors_directors_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_director_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("DirectorNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_director_news_paper_directors_directors_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_director_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("DissertationEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.Dissertation", null)
                        .WithMany()
                        .HasForeignKey("DissertationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_e_material_file_dissertations_dissertations_id");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_e_material_file_e_material_files_e_material_fi");
                });

            modelBuilder.Entity("DissertationKit", b =>
                {
                    b.HasOne("Entities.Concrete.Dissertation", null)
                        .WithMany()
                        .HasForeignKey("DissertationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_kit_dissertations_dissertations_id");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_kit_kits_kits_id");
                });

            modelBuilder.Entity("DissertationResearcher", b =>
                {
                    b.HasOne("Entities.Concrete.Dissertation", null)
                        .WithMany()
                        .HasForeignKey("DissertationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_researcher_dissertations_dissertations_id");

                    b.HasOne("Entities.Concrete.Infos.Researcher", null)
                        .WithMany()
                        .HasForeignKey("ResearcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_researcher_researchers_researcher_id");
                });

            modelBuilder.Entity("DissertationTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Dissertation", null)
                        .WithMany()
                        .HasForeignKey("DissertationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_technical_placeholder_dissertations_dissertati");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_technical_placeholder_technical_placeholders_t");
                });

            modelBuilder.Entity("DissertationUniversity", b =>
                {
                    b.HasOne("Entities.Concrete.Dissertation", null)
                        .WithMany()
                        .HasForeignKey("DissertationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_university_dissertations_dissertations_id");

                    b.HasOne("Entities.Concrete.Infos.University", null)
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertation_university_universities_university_id");
                });

            modelBuilder.Entity("EditionEncyclopedia", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edition_encyclopedia_editions_editions_id");

                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edition_encyclopedia_encyclopedias_encyclopedias_id");
                });

            modelBuilder.Entity("EditionMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edition_magazine_editions_editions_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edition_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("EditionNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edition_news_paper_editions_editions_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edition_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("EditorEncyclopedia", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Editor", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editor_encyclopedia_editors_editors_id");

                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editor_encyclopedia_encyclopedias_encyclopedias_id");
                });

            modelBuilder.Entity("EditorMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Editor", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editor_magazine_editors_editors_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editor_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("EditorNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Editor", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editor_news_paper_editors_editors_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editor_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("ElectronicsResourceKit", b =>
                {
                    b.HasOne("Entities.Concrete.ElectronicsResource", null)
                        .WithMany()
                        .HasForeignKey("ElectronicsResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_electronics_resource_kit_electronics_resources_electronics_");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_electronics_resource_kit_kits_kits_id");
                });

            modelBuilder.Entity("ElectronicsResourceTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.ElectronicsResource", null)
                        .WithMany()
                        .HasForeignKey("ElectronicsResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_electronics_resource_technical_placeholder_electronics_reso");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_electronics_resource_technical_placeholder_technical_placeh");
                });

            modelBuilder.Entity("EMaterialFileElectronicsResource", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_electronics_resource_e_material_files_e_mat");

                    b.HasOne("Entities.Concrete.ElectronicsResource", null)
                        .WithMany()
                        .HasForeignKey("ElectronicsResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_electronics_resource_electronics_resources_");
                });

            modelBuilder.Entity("EMaterialFileEncyclopedia", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_encyclopedia_e_material_files_e_material_fi");

                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_encyclopedia_encyclopedias_encyclopedias_id");
                });

            modelBuilder.Entity("EMaterialFileGraphicalImage", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_graphical_image_e_material_files_e_material");

                    b.HasOne("Entities.Concrete.GraphicalImage", null)
                        .WithMany()
                        .HasForeignKey("GraphicalImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_graphical_image_graphical_images_graphical_");
                });

            modelBuilder.Entity("EMaterialFileMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_magazine_e_material_files_e_material_files_");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("EMaterialFileMicroform", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_microform_e_material_files_e_material_files");

                    b.HasOne("Entities.Concrete.Microform", null)
                        .WithMany()
                        .HasForeignKey("MicroformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_microform_microforms_microforms_id");
                });

            modelBuilder.Entity("EMaterialFileMusicalNote", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_musical_note_e_material_files_e_material_fi");

                    b.HasOne("Entities.Concrete.MusicalNote", null)
                        .WithMany()
                        .HasForeignKey("MusicalNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_musical_note_musical_notes_musical_notes_id");
                });

            modelBuilder.Entity("EMaterialFileNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_news_paper_e_material_files_e_material_file");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("EMaterialFileObject3D", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_object3d_e_material_files_e_material_files_");

                    b.HasOne("Entities.Concrete.Object3D", null)
                        .WithMany()
                        .HasForeignKey("Object3DsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_object3d_object3ds_object3ds_id");
                });

            modelBuilder.Entity("EMaterialFilePainting", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_painting_e_material_files_e_material_files_");

                    b.HasOne("Entities.Concrete.Painting", null)
                        .WithMany()
                        .HasForeignKey("PaintingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_painting_paintings_paintings_id");
                });

            modelBuilder.Entity("EMaterialFilePoster", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_poster_e_material_files_e_material_files_id");

                    b.HasOne("Entities.Concrete.Poster", null)
                        .WithMany()
                        .HasForeignKey("PostersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_poster_posters_posters_id");
                });

            modelBuilder.Entity("EMaterialFileThesis", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_thesis_e_material_files_e_material_files_id");

                    b.HasOne("Entities.Concrete.Thesis", null)
                        .WithMany()
                        .HasForeignKey("ThesesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e_material_file_thesis_theses_theses_id");
                });

            modelBuilder.Entity("EncyclopediaGraphicDesigner", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_graphic_designer_encyclopedias_encyclopedias_id");

                    b.HasOne("Entities.Concrete.Infos.GraphicDesigner", null)
                        .WithMany()
                        .HasForeignKey("GraphicDesignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_graphic_designer_graphic_design_graphic_design");
                });

            modelBuilder.Entity("EncyclopediaGraphicDirector", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_graphic_director_encyclopedias_encyclopedias_id");

                    b.HasOne("Entities.Concrete.Infos.GraphicDirector", null)
                        .WithMany()
                        .HasForeignKey("GraphicDirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_graphic_director_graphic_directors_graphic_dir");
                });

            modelBuilder.Entity("EncyclopediaImage", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("CoverImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_image_images_cover_images_id");

                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_image_encyclopedias_encyclopedias_id");
                });

            modelBuilder.Entity("EncyclopediaInterpreters", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_interpreters_encyclopedias_encyclopedias_id");

                    b.HasOne("Entities.Concrete.Infos.Interpreters", null)
                        .WithMany()
                        .HasForeignKey("InterpretersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_interpreters_interpreters_interpreters_id");
                });

            modelBuilder.Entity("EncyclopediaKit", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_kit_encyclopedias_encyclopedias_id");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_kit_kits_kits_id");
                });

            modelBuilder.Entity("EncyclopediaOtherPeople", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_other_people_encyclopedias_encyclopedias_id");

                    b.HasOne("Entities.Concrete.Infos.OtherPeople", null)
                        .WithMany()
                        .HasForeignKey("OtherPeoplesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_other_people_other_peoples_other_peoples_id");
                });

            modelBuilder.Entity("EncyclopediaRedaction", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_redaction_encyclopedias_encyclopedias_id");

                    b.HasOne("Entities.Concrete.Infos.Redaction", null)
                        .WithMany()
                        .HasForeignKey("RedactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_redaction_redactions_redactions_id");
                });

            modelBuilder.Entity("EncyclopediaTechnicalNumber", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_technical_number_encyclopedias_encyclopedias_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalNumber", null)
                        .WithMany()
                        .HasForeignKey("TechnicalNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_technical_number_technical_numbers_technical_n");
                });

            modelBuilder.Entity("EncyclopediaTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_technical_placeholder_encyclopedias_encycloped");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_technical_placeholder_technical_placeholders_t");
                });

            modelBuilder.Entity("EncyclopediaWriter", b =>
                {
                    b.HasOne("Entities.Concrete.Encyclopedia", null)
                        .WithMany()
                        .HasForeignKey("EncyclopediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_writer_encyclopedias_encyclopedias_id");

                    b.HasOne("Entities.Concrete.Infos.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encyclopedia_writer_writers_writers_id");
                });

            modelBuilder.Entity("Entities.Concrete.BookSeries", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany("BookSeries")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_book_series_books_book_id");
                });

            modelBuilder.Entity("Entities.Concrete.Depiction", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depictions_images_image_id");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Entities.Concrete.Dissertation", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertations_cities_city_id");

                    b.HasOne("Entities.Concrete.Infos.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dissertations_languages_language_id");

                    b.Navigation("City");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Address", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_cities_city_id");

                    b.HasOne("Entities.Concrete.Infos.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_countries_country_id");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Category", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany("Categories")
                        .HasForeignKey("KitId")
                        .HasConstraintName("fk_categories_kits_kit_id");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.City", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Dimension", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany("Dimensions")
                        .HasForeignKey("KitId")
                        .HasConstraintName("fk_dimensions_kits_kit_id");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Edition", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editions_publishers_publisher_id");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.EMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany("EMaterialFiles")
                        .HasForeignKey("KitId")
                        .HasConstraintName("fk_e_material_files_kits_kit_id");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Library", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_libraries_addresses_address_id");

                    b.HasOne("Entities.Concrete.Infos.Communication", "Communication")
                        .WithMany()
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_libraries_communications_communication_id");

                    b.Navigation("Address");

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Publisher", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publishers_addresses_address_id");

                    b.HasOne("Entities.Concrete.Infos.Communication", "Communication")
                        .WithMany()
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publishers_communications_communication_id");

                    b.Navigation("Address");

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Reference", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.TechnicalNumber", "TechnicalNumber")
                        .WithMany()
                        .HasForeignKey("TechnicalNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_references_technical_numbers_technical_number_id");

                    b.Navigation("TechnicalNumber");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Researcher", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("fk_researchers_universities_university_id");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.TechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany("TechnicalPlaceholders")
                        .HasForeignKey("KitId")
                        .HasConstraintName("fk_technical_placeholders_kits_kit_id");

                    b.HasOne("Entities.Concrete.Infos.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_technical_placeholders_libraries_library_id");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.University", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_universities_addresses_address_id");

                    b.HasOne("Entities.Concrete.Infos.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_universities_branches_branch_id");

                    b.Navigation("Address");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Entities.Concrete.Painting", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_paintings_images_image_id");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Entities.Concrete.Thesis", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_theses_cities_city_id");

                    b.HasOne("Entities.Concrete.Infos.Consultant", "Consultant")
                        .WithMany("Theses")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_theses_consultants_consultant_id");

                    b.HasOne("Entities.Concrete.Infos.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_theses_languages_language_id");

                    b.HasOne("Entities.Concrete.Infos.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_theses_universities_university_id");

                    b.Navigation("City");

                    b.Navigation("Consultant");

                    b.Navigation("Language");

                    b.Navigation("University");
                });

            modelBuilder.Entity("GraphicalImageKit", b =>
                {
                    b.HasOne("Entities.Concrete.GraphicalImage", null)
                        .WithMany()
                        .HasForeignKey("GraphicalImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphical_image_kit_graphical_images_graphical_images_id");

                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphical_image_kit_kits_kits_id");
                });

            modelBuilder.Entity("GraphicalImageTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.GraphicalImage", null)
                        .WithMany()
                        .HasForeignKey("GraphicalImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphical_image_technical_placeholder_graphical_images_grap");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphical_image_technical_placeholder_technical_placeholder");
                });

            modelBuilder.Entity("GraphicDesignerMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.GraphicDesigner", null)
                        .WithMany()
                        .HasForeignKey("GraphicDesignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphic_designer_magazine_graphic_design_graphic_designs_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphic_designer_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("GraphicDesignerNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.GraphicDesigner", null)
                        .WithMany()
                        .HasForeignKey("GraphicDesignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphic_designer_news_paper_graphic_design_graphic_designs_");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphic_designer_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("GraphicDirectorMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.GraphicDirector", null)
                        .WithMany()
                        .HasForeignKey("GraphicDirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphic_director_magazine_graphic_directors_graphic_directo");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphic_director_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("GraphicDirectorNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.GraphicDirector", null)
                        .WithMany()
                        .HasForeignKey("GraphicDirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphic_director_news_paper_graphic_directors_graphic_direc");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graphic_director_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("ImageMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("CoverImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_magazine_images_cover_images_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("ImageNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("CoverImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_news_paper_images_cover_images_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("ImageObject3D", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_object3d_images_images_id");

                    b.HasOne("Entities.Concrete.Object3D", null)
                        .WithMany()
                        .HasForeignKey("Object3DsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_object3d_object3ds_object3ds_id");
                });

            modelBuilder.Entity("ImagePoster", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_poster_images_image_id");

                    b.HasOne("Entities.Concrete.Poster", null)
                        .WithMany()
                        .HasForeignKey("PostersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_poster_posters_posters_id");
                });

            modelBuilder.Entity("InterpretersMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Interpreters", null)
                        .WithMany()
                        .HasForeignKey("InterpretersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interpreters_magazine_interpreters_interpreters_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interpreters_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("InterpretersNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Interpreters", null)
                        .WithMany()
                        .HasForeignKey("InterpretersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interpreters_news_paper_interpreters_interpreters_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interpreters_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("KitMagazine", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_magazine_kits_kits_id");

                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_magazine_magazines_magazines_id");
                });

            modelBuilder.Entity("KitMicroform", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_microform_kits_kits_id");

                    b.HasOne("Entities.Concrete.Microform", null)
                        .WithMany()
                        .HasForeignKey("MicroformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_microform_microforms_microforms_id");
                });

            modelBuilder.Entity("KitMusicalNote", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_musical_note_kits_kits_id");

                    b.HasOne("Entities.Concrete.MusicalNote", null)
                        .WithMany()
                        .HasForeignKey("MusicalNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_musical_note_musical_notes_musical_notes_id");
                });

            modelBuilder.Entity("KitNewsPaper", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_news_paper_kits_kits_id");

                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_news_paper_news_papers_news_papers_id");
                });

            modelBuilder.Entity("KitObject3D", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_object3d_kits_kits_id");

                    b.HasOne("Entities.Concrete.Object3D", null)
                        .WithMany()
                        .HasForeignKey("Object3DsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_object3d_object3ds_object3ds_id");
                });

            modelBuilder.Entity("KitPainting", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_painting_kits_kits_id");

                    b.HasOne("Entities.Concrete.Painting", null)
                        .WithMany()
                        .HasForeignKey("PaintingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_painting_paintings_paintings_id");
                });

            modelBuilder.Entity("KitPoster", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_poster_kits_kits_id");

                    b.HasOne("Entities.Concrete.Poster", null)
                        .WithMany()
                        .HasForeignKey("PostersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_poster_posters_posters_id");
                });

            modelBuilder.Entity("KitThesis", b =>
                {
                    b.HasOne("Entities.Concrete.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_thesis_kits_kits_id");

                    b.HasOne("Entities.Concrete.Thesis", null)
                        .WithMany()
                        .HasForeignKey("ThesesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kit_thesis_theses_theses_id");
                });

            modelBuilder.Entity("MagazineOtherPeople", b =>
                {
                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_other_people_magazines_magazines_id");

                    b.HasOne("Entities.Concrete.Infos.OtherPeople", null)
                        .WithMany()
                        .HasForeignKey("OtherPeoplesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_other_people_other_peoples_other_peoples_id");
                });

            modelBuilder.Entity("MagazineRedaction", b =>
                {
                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_redaction_magazines_magazines_id");

                    b.HasOne("Entities.Concrete.Infos.Redaction", null)
                        .WithMany()
                        .HasForeignKey("RedactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_redaction_redactions_redactions_id");
                });

            modelBuilder.Entity("MagazineTechnicalNumber", b =>
                {
                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_technical_number_magazines_magazines_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalNumber", null)
                        .WithMany()
                        .HasForeignKey("TechnicalNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_technical_number_technical_numbers_technical_numbe");
                });

            modelBuilder.Entity("MagazineTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_technical_placeholder_magazines_magazines_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_technical_placeholder_technical_placeholders_techn");
                });

            modelBuilder.Entity("MagazineWriter", b =>
                {
                    b.HasOne("Entities.Concrete.Magazine", null)
                        .WithMany()
                        .HasForeignKey("MagazinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_writer_magazines_magazines_id");

                    b.HasOne("Entities.Concrete.Infos.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magazine_writer_writers_writers_id");
                });

            modelBuilder.Entity("MicroformTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Microform", null)
                        .WithMany()
                        .HasForeignKey("MicroformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_microform_technical_placeholder_microforms_microforms_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_microform_technical_placeholder_technical_placeholders_tech");
                });

            modelBuilder.Entity("MusicalNoteTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.MusicalNote", null)
                        .WithMany()
                        .HasForeignKey("MusicalNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_musical_note_technical_placeholder_musical_notes_musical_no");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_musical_note_technical_placeholder_technical_placeholders_t");
                });

            modelBuilder.Entity("NewsPaperOtherPeople", b =>
                {
                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_other_people_news_papers_news_papers_id");

                    b.HasOne("Entities.Concrete.Infos.OtherPeople", null)
                        .WithMany()
                        .HasForeignKey("OtherPeoplesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_other_people_other_peoples_other_peoples_id");
                });

            modelBuilder.Entity("NewsPaperRedaction", b =>
                {
                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_redaction_news_papers_news_papers_id");

                    b.HasOne("Entities.Concrete.Infos.Redaction", null)
                        .WithMany()
                        .HasForeignKey("RedactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_redaction_redactions_redactions_id");
                });

            modelBuilder.Entity("NewsPaperTechnicalNumber", b =>
                {
                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_technical_number_news_papers_news_papers_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalNumber", null)
                        .WithMany()
                        .HasForeignKey("TechnicalNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_technical_number_technical_numbers_technical_num");
                });

            modelBuilder.Entity("NewsPaperTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_technical_placeholder_news_papers_news_papers_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_technical_placeholder_technical_placeholders_tec");
                });

            modelBuilder.Entity("NewsPaperWriter", b =>
                {
                    b.HasOne("Entities.Concrete.NewsPaper", null)
                        .WithMany()
                        .HasForeignKey("NewsPapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_writer_news_papers_news_papers_id");

                    b.HasOne("Entities.Concrete.Infos.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_paper_writer_writers_writers_id");
                });

            modelBuilder.Entity("Object3DTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Object3D", null)
                        .WithMany()
                        .HasForeignKey("Object3DsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_object3d_technical_placeholder_object3ds_object3ds_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_object3d_technical_placeholder_technical_placeholders_techn");
                });

            modelBuilder.Entity("PaintingTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Painting", null)
                        .WithMany()
                        .HasForeignKey("PaintingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_painting_technical_placeholder_paintings_paintings_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_painting_technical_placeholder_technical_placeholders_techn");
                });

            modelBuilder.Entity("PosterTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Poster", null)
                        .WithMany()
                        .HasForeignKey("PostersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_poster_technical_placeholder_posters_posters_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_poster_technical_placeholder_technical_placeholders_technic");
                });

            modelBuilder.Entity("TechnicalPlaceholderThesis", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_technical_placeholder_thesis_technical_placeholders_technic");

                    b.HasOne("Entities.Concrete.Thesis", null)
                        .WithMany()
                        .HasForeignKey("ThesesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_technical_placeholder_thesis_theses_theses_id");
                });

            modelBuilder.Entity("Entities.Concrete.Book", b =>
                {
                    b.Navigation("BookSeries");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Consultant", b =>
                {
                    b.Navigation("Theses");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Entities.Concrete.Kit", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Dimensions");

                    b.Navigation("EMaterialFiles");

                    b.Navigation("TechnicalPlaceholders");
                });
#pragma warning restore 612, 618
        }
    }
}
