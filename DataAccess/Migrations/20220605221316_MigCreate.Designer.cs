// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20220605221316_MigCreate")]
    partial class MigCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcademicJournalCategory", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("AcademicJournalsId", "CategoriesId")
                        .HasName("pk_academic_journal_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_academic_journal_category_categories_id");

                    b.ToTable("academic_journal_category", (string)null);
                });

            modelBuilder.Entity("AcademicJournalDimension", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("AcademicJournalsId", "DimensionsId")
                        .HasName("pk_academic_journal_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_academic_journal_dimension_dimensions_id");

                    b.ToTable("academic_journal_dimension", (string)null);
                });

            modelBuilder.Entity("AcademicJournalEditor", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editors_id");

                    b.HasKey("AcademicJournalsId", "EditorsId")
                        .HasName("pk_academic_journal_editor");

                    b.HasIndex("EditorsId")
                        .HasDatabaseName("ix_academic_journal_editor_editors_id");

                    b.ToTable("academic_journal_editor", (string)null);
                });

            modelBuilder.Entity("AcademicJournalEMaterialFile", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("AcademicJournalsId", "EMaterialFilesId")
                        .HasName("pk_academic_journal_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_academic_journal_e_material_file_e_material_files_id");

                    b.ToTable("academic_journal_e_material_file", (string)null);
                });

            modelBuilder.Entity("AcademicJournalPublisher", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uuid")
                        .HasColumnName("publishers_id");

                    b.HasKey("AcademicJournalsId", "PublishersId")
                        .HasName("pk_academic_journal_publisher");

                    b.HasIndex("PublishersId")
                        .HasDatabaseName("ix_academic_journal_publisher_publishers_id");

                    b.ToTable("academic_journal_publisher", (string)null);
                });

            modelBuilder.Entity("AcademicJournalResearcher", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("ResearchersId")
                        .HasColumnType("uuid")
                        .HasColumnName("researchers_id");

                    b.HasKey("AcademicJournalsId", "ResearchersId")
                        .HasName("pk_academic_journal_researcher");

                    b.HasIndex("ResearchersId")
                        .HasDatabaseName("ix_academic_journal_researcher_researchers_id");

                    b.ToTable("academic_journal_researcher", (string)null);
                });

            modelBuilder.Entity("AcademicJournalTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("AcademicJournalsId")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_journals_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("AcademicJournalsId", "TechnicalPlaceholdersId")
                        .HasName("pk_academic_journal_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_academic_journal_technical_placeholder_technical_placeholde");

                    b.ToTable("academic_journal_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("AudioRecordCategory", b =>
                {
                    b.Property<Guid>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("AudioRecordsId", "CategoriesId")
                        .HasName("pk_audio_record_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_audio_record_category_categories_id");

                    b.ToTable("audio_record_category", (string)null);
                });

            modelBuilder.Entity("AudioRecordEMaterialFile", b =>
                {
                    b.Property<Guid>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("AudioRecordsId", "EMaterialFilesId")
                        .HasName("pk_audio_record_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_audio_record_e_material_file_e_material_files_id");

                    b.ToTable("audio_record_e_material_file", (string)null);
                });

            modelBuilder.Entity("AudioRecordTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("AudioRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_records_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("AudioRecordsId", "TechnicalPlaceholdersId")
                        .HasName("pk_audio_record_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_audio_record_technical_placeholder_technical_placeholders_id");

                    b.ToTable("audio_record_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("BooksId", "CategoriesId")
                        .HasName("pk_book_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_book_category_categories_id");

                    b.ToTable("book_category", (string)null);
                });

            modelBuilder.Entity("BookCoverCap", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<byte>("CoverCapsId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_caps_id");

                    b.HasKey("BooksId", "CoverCapsId")
                        .HasName("pk_book_cover_cap");

                    b.HasIndex("CoverCapsId")
                        .HasDatabaseName("ix_book_cover_cap_cover_caps_id");

                    b.ToTable("book_cover_cap", (string)null);
                });

            modelBuilder.Entity("BookDimension", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("BooksId", "DimensionsId")
                        .HasName("pk_book_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_book_dimension_dimensions_id");

                    b.ToTable("book_dimension", (string)null);
                });

            modelBuilder.Entity("BookEdition", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("EditionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editions_id");

                    b.HasKey("BooksId", "EditionsId")
                        .HasName("pk_book_edition");

                    b.HasIndex("EditionsId")
                        .HasDatabaseName("ix_book_edition_editions_id");

                    b.ToTable("book_edition", (string)null);
                });

            modelBuilder.Entity("BookEMaterialFile", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("BooksId", "EMaterialFilesId")
                        .HasName("pk_book_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_book_e_material_file_e_material_files_id");

                    b.ToTable("book_e_material_file", (string)null);
                });

            modelBuilder.Entity("BookFirstPagePersonBase", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("FirstPagePeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("first_page_people_id");

                    b.HasKey("BooksId", "FirstPagePeopleId")
                        .HasName("pk_book_first_page_person_base");

                    b.HasIndex("FirstPagePeopleId")
                        .HasDatabaseName("ix_book_first_page_person_base_first_page_people_id");

                    b.ToTable("book_first_page_person_base", (string)null);
                });

            modelBuilder.Entity("BookImage", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("CoverImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_images_id");

                    b.HasKey("BooksId", "CoverImagesId")
                        .HasName("pk_book_image");

                    b.HasIndex("CoverImagesId")
                        .HasDatabaseName("ix_book_image_cover_images_id");

                    b.ToTable("book_image", (string)null);
                });

            modelBuilder.Entity("BookSeriesCategory", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.HasKey("BookSeriesId", "CategoriesId")
                        .HasName("pk_book_series_category");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_book_series_category_categories_id");

                    b.ToTable("book_series_category", (string)null);
                });

            modelBuilder.Entity("BookSeriesCoverCap", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<byte>("CoverCapsId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_caps_id");

                    b.HasKey("BookSeriesId", "CoverCapsId")
                        .HasName("pk_book_series_cover_cap");

                    b.HasIndex("CoverCapsId")
                        .HasDatabaseName("ix_book_series_cover_cap_cover_caps_id");

                    b.ToTable("book_series_cover_cap", (string)null);
                });

            modelBuilder.Entity("BookSeriesDimension", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.HasKey("BookSeriesId", "DimensionsId")
                        .HasName("pk_book_series_dimension");

                    b.HasIndex("DimensionsId")
                        .HasDatabaseName("ix_book_series_dimension_dimensions_id");

                    b.ToTable("book_series_dimension", (string)null);
                });

            modelBuilder.Entity("BookSeriesEdition", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("EditionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("editions_id");

                    b.HasKey("BookSeriesId", "EditionsId")
                        .HasName("pk_book_series_edition");

                    b.HasIndex("EditionsId")
                        .HasDatabaseName("ix_book_series_edition_editions_id");

                    b.ToTable("book_series_edition", (string)null);
                });

            modelBuilder.Entity("BookSeriesEMaterialFile", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.HasKey("BookSeriesId", "EMaterialFilesId")
                        .HasName("pk_book_series_e_material_file");

                    b.HasIndex("EMaterialFilesId")
                        .HasDatabaseName("ix_book_series_e_material_file_e_material_files_id");

                    b.ToTable("book_series_e_material_file", (string)null);
                });

            modelBuilder.Entity("BookSeriesFirstPagePersonBase", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("FirstPagePeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("first_page_people_id");

                    b.HasKey("BookSeriesId", "FirstPagePeopleId")
                        .HasName("pk_book_series_first_page_person_base");

                    b.HasIndex("FirstPagePeopleId")
                        .HasDatabaseName("ix_book_series_first_page_person_base_first_page_people_id");

                    b.ToTable("book_series_first_page_person_base", (string)null);
                });

            modelBuilder.Entity("BookSeriesImage", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("CoverImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_images_id");

                    b.HasKey("BookSeriesId", "CoverImagesId")
                        .HasName("pk_book_series_image");

                    b.HasIndex("CoverImagesId")
                        .HasDatabaseName("ix_book_series_image_cover_images_id");

                    b.ToTable("book_series_image", (string)null);
                });

            modelBuilder.Entity("BookSeriesTechnicalNumber", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("TechnicalNumbersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_numbers_id");

                    b.HasKey("BookSeriesId", "TechnicalNumbersId")
                        .HasName("pk_book_series_technical_number");

                    b.HasIndex("TechnicalNumbersId")
                        .HasDatabaseName("ix_book_series_technical_number_technical_numbers_id");

                    b.ToTable("book_series_technical_number", (string)null);
                });

            modelBuilder.Entity("BookSeriesTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("BookSeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_series_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("BookSeriesId", "TechnicalPlaceholdersId")
                        .HasName("pk_book_series_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_book_series_technical_placeholder_technical_placeholders_id");

                    b.ToTable("book_series_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("BookTechnicalNumber", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("TechnicalNumbersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_numbers_id");

                    b.HasKey("BooksId", "TechnicalNumbersId")
                        .HasName("pk_book_technical_number");

                    b.HasIndex("TechnicalNumbersId")
                        .HasDatabaseName("ix_book_technical_number_technical_numbers_id");

                    b.ToTable("book_technical_number", (string)null);
                });

            modelBuilder.Entity("BookTechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("books_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.HasKey("BooksId", "TechnicalPlaceholdersId")
                        .HasName("pk_book_technical_placeholder");

                    b.HasIndex("TechnicalPlaceholdersId")
                        .HasDatabaseName("ix_book_technical_placeholder_technical_placeholders_id");

                    b.ToTable("book_technical_placeholder", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.AcademicJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AJNumber")
                        .HasColumnType("integer")
                        .HasColumnName("aj_number");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("DateOfYear")
                        .HasColumnType("integer")
                        .HasColumnName("date_of_year");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("editor_id");

                    b.Property<int>("EndPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("end_page_number");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("is_secret");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.Property<Guid>("ResearcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("researcher_id");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<int>("StartPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("start_page_number");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Volume")
                        .HasColumnType("integer")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_academic_journals");

                    b.ToTable("academic_journals", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.AudioRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_date");

                    b.Property<DateTime>("RecordEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_end_date");

                    b.Property<float>("RecordingLength")
                        .HasColumnType("real")
                        .HasColumnName("recording_length");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_audio_records");

                    b.ToTable("audio_records", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Base.FirstPagePersonBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_first_page_person_base");

                    b.ToTable("first_page_person_base", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("FirstPagePersonBase");
                });

            modelBuilder.Entity("Entities.Concrete.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<byte>("CoverCapId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_cap_id");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<Guid>("FirstPagePeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("first_page_people_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OriginalBookName")
                        .HasColumnType("text")
                        .HasColumnName("original_book_name");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_number_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.BookSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<Guid>("BookIds")
                        .HasColumnType("uuid")
                        .HasColumnName("book_ids");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<byte>("CoverCapId")
                        .HasColumnType("smallint")
                        .HasColumnName("cover_cap_id");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DimensionsId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("dimensions_id");

                    b.Property<Guid?>("EMaterialFilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("e_material_files_id");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<Guid>("FirstPagePeopleId")
                        .HasColumnType("uuid")
                        .HasColumnName("first_page_people_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("secret_level");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<Guid>("TechnicalNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_number_id");

                    b.Property<Guid>("TechnicalPlaceholdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_placeholders_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_book_series");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_series_book_id");

                    b.ToTable("book_series", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_line2");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_name");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("GeoLocation")
                        .HasColumnType("text")
                        .HasColumnName("geo_location");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_addresses_city_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_addresses_country_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_branches");

                    b.ToTable("branches", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CommunicationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("communication_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("text")
                        .HasColumnName("fax_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("web_site");

                    b.HasKey("Id")
                        .HasName("pk_communications");

                    b.ToTable("communications", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.CoverCap", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("BookSkinType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("book_skin_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_cover_caps");

                    b.ToTable("cover_caps", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Dimension", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AudioRecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("audio_record_id");

                    b.Property<double>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("Length")
                        .HasColumnType("double precision")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_dimensions");

                    b.HasIndex("AudioRecordId")
                        .HasDatabaseName("ix_dimensions_audio_record_id");

                    b.ToTable("dimensions", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Edition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("edition_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.HasKey("Id")
                        .HasName("pk_editions");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_editions_publisher_id");

                    b.ToTable("editions", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.EMaterialFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<double>("FileSizeMB")
                        .HasColumnType("double precision")
                        .HasColumnName("file_size_mb");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("is_secret");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_e_material_files");

                    b.ToTable("e_material_files", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_name");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<Guid>("CommunicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("communication_id");

                    b.Property<bool>("IsDestroyed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_destroyed");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("library_name");

                    b.Property<byte>("LibraryType")
                        .HasColumnType("smallint")
                        .HasColumnName("library_type");

                    b.HasKey("Id")
                        .HasName("pk_libraries");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_libraries_address_id");

                    b.HasIndex("CommunicationId")
                        .HasDatabaseName("ix_libraries_communication_id");

                    b.ToTable("libraries", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<Guid>("CommunicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("communication_id");

                    b.Property<DateTime>("DateOfPublication")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_publication");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_publishers");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_publishers_address_id");

                    b.HasIndex("CommunicationId")
                        .HasDatabaseName("ix_publishers_communication_id");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.TechnicalNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Barcode")
                        .HasColumnType("bigint")
                        .HasColumnName("barcode");

                    b.Property<string>("CertificateCode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("certificate_code");

                    b.Property<decimal>("ISBN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("isbn");

                    b.Property<decimal?>("ISSN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("issn");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_technical_numbers");

                    b.ToTable("technical_numbers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.TechnicalPlaceholder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uuid")
                        .HasColumnName("library_id");

                    b.Property<string>("StockCode")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("stock_code");

                    b.Property<decimal>("StockNumber")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("stock_number");

                    b.Property<string>("WhereIsMaterial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("where_is_material");

                    b.HasKey("Id")
                        .HasName("pk_technical_placeholders");

                    b.HasIndex("LibraryId")
                        .HasDatabaseName("ix_technical_placeholders_library_id");

                    b.ToTable("technical_placeholders", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("branch_id");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institute");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("university_name");

                    b.HasKey("Id")
                        .HasName("pk_universities");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_universities_address_id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("ix_universities_branch_id");

                    b.ToTable("universities", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Composer", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.Property<string>("NamePreAttachment")
                        .HasColumnType("text")
                        .HasColumnName("name_pre_attachment");

                    b.HasDiscriminator().HasValue("Composer");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Consultant", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.Property<string>("NamePreAttachment")
                        .HasColumnType("text")
                        .HasColumnName("consultant_name_pre_attachment");

                    b.HasDiscriminator().HasValue("Consultant");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Director", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.HasDiscriminator().HasValue("Director");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Editor", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.HasDiscriminator().HasValue("Editor");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.GraphicDesign", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.HasDiscriminator().HasValue("GraphicDesign");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.GraphicDirector", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.HasDiscriminator().HasValue("GraphicDirector");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Interpreters", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.Property<string>("WhichToLanguage")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("which_to_language");

                    b.HasDiscriminator().HasValue("Interpreters");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.OtherPeople", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.Property<string>("NamePreAttachment")
                        .HasColumnType("text")
                        .HasColumnName("other_people_name_pre_attachment");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasDiscriminator().HasValue("OtherPeople");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Redaction", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.HasDiscriminator().HasValue("Redaction");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Researcher", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.Property<string>("NamePreAttachment")
                        .HasColumnType("text")
                        .HasColumnName("researcher_name_pre_attachment");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialty");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_first_page_person_base_university_id");

                    b.HasDiscriminator().HasValue("Researcher");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Writer", b =>
                {
                    b.HasBaseType("Entities.Concrete.Base.FirstPagePersonBase");

                    b.Property<string>("NamePreAttachment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("writer_name_pre_attachment");

                    b.HasDiscriminator().HasValue("Writer");
                });

            modelBuilder.Entity("AcademicJournalCategory", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_category_academic_journals_academic_journa");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_category_categories_categories_id");
                });

            modelBuilder.Entity("AcademicJournalDimension", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_dimension_academic_journals_academic_journ");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("AcademicJournalEditor", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_editor_academic_journals_academic_journals");

                    b.HasOne("Entities.Concrete.Infos.Editor", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_editor_first_page_person_base_editors_id");
                });

            modelBuilder.Entity("AcademicJournalEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_e_material_file_academic_journals_academic");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_e_material_file_e_material_files_e_materia");
                });

            modelBuilder.Entity("AcademicJournalPublisher", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_publisher_academic_journals_academic_journ");

                    b.HasOne("Entities.Concrete.Infos.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_publisher_publishers_publishers_id");
                });

            modelBuilder.Entity("AcademicJournalResearcher", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_researcher_academic_journals_academic_jour");

                    b.HasOne("Entities.Concrete.Infos.Researcher", null)
                        .WithMany()
                        .HasForeignKey("ResearchersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_researcher_first_page_person_base_research");
                });

            modelBuilder.Entity("AcademicJournalTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.AcademicJournal", null)
                        .WithMany()
                        .HasForeignKey("AcademicJournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_technical_placeholder_academic_journals_ac");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_journal_technical_placeholder_technical_placeholde");
                });

            modelBuilder.Entity("AudioRecordCategory", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany()
                        .HasForeignKey("AudioRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_category_audio_records_audio_records_id");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_category_categories_categories_id");
                });

            modelBuilder.Entity("AudioRecordEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany()
                        .HasForeignKey("AudioRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_e_material_file_audio_records_audio_records_id");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_e_material_file_e_material_files_e_material_fi");
                });

            modelBuilder.Entity("AudioRecordTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany()
                        .HasForeignKey("AudioRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_technical_placeholder_audio_records_audio_reco");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_record_technical_placeholder_technical_placeholders_t");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_category_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_category_categories_categories_id");
                });

            modelBuilder.Entity("BookCoverCap", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_cover_cap_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.CoverCap", null)
                        .WithMany()
                        .HasForeignKey("CoverCapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_cover_cap_cover_caps_cover_caps_id");
                });

            modelBuilder.Entity("BookDimension", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_dimension_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("BookEdition", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_edition_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_edition_editions_editions_id");
                });

            modelBuilder.Entity("BookEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_e_material_file_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_e_material_file_e_material_files_e_material_files_id");
                });

            modelBuilder.Entity("BookFirstPagePersonBase", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_first_page_person_base_books_books_id");

                    b.HasOne("Entities.Concrete.Base.FirstPagePersonBase", null)
                        .WithMany()
                        .HasForeignKey("FirstPagePeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_first_page_person_base_first_page_person_base_first_pa");
                });

            modelBuilder.Entity("BookImage", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_image_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("CoverImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_image_images_cover_images_id");
                });

            modelBuilder.Entity("BookSeriesCategory", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_category_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_category_categories_categories_id");
                });

            modelBuilder.Entity("BookSeriesCoverCap", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_cover_cap_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.CoverCap", null)
                        .WithMany()
                        .HasForeignKey("CoverCapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_cover_cap_cover_caps_cover_caps_id");
                });

            modelBuilder.Entity("BookSeriesDimension", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_dimension_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_dimension_dimensions_dimensions_id");
                });

            modelBuilder.Entity("BookSeriesEdition", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_edition_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_edition_editions_editions_id");
                });

            modelBuilder.Entity("BookSeriesEMaterialFile", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_e_material_file_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.EMaterialFile", null)
                        .WithMany()
                        .HasForeignKey("EMaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_e_material_file_e_material_files_e_material_fil");
                });

            modelBuilder.Entity("BookSeriesFirstPagePersonBase", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_first_page_person_base_book_series_book_series_");

                    b.HasOne("Entities.Concrete.Base.FirstPagePersonBase", null)
                        .WithMany()
                        .HasForeignKey("FirstPagePeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_first_page_person_base_first_page_person_base_f");
                });

            modelBuilder.Entity("BookSeriesImage", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_image_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.Image", null)
                        .WithMany()
                        .HasForeignKey("CoverImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_image_images_cover_images_id");
                });

            modelBuilder.Entity("BookSeriesTechnicalNumber", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_technical_number_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalNumber", null)
                        .WithMany()
                        .HasForeignKey("TechnicalNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_technical_number_technical_numbers_technical_nu");
                });

            modelBuilder.Entity("BookSeriesTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_technical_placeholder_book_series_book_series_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_technical_placeholder_technical_placeholders_te");
                });

            modelBuilder.Entity("BookTechnicalNumber", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_technical_number_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalNumber", null)
                        .WithMany()
                        .HasForeignKey("TechnicalNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_technical_number_technical_numbers_technical_numbers_id");
                });

            modelBuilder.Entity("BookTechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_technical_placeholder_books_books_id");

                    b.HasOne("Entities.Concrete.Infos.TechnicalPlaceholder", null)
                        .WithMany()
                        .HasForeignKey("TechnicalPlaceholdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_technical_placeholder_technical_placeholders_technical");
                });

            modelBuilder.Entity("Entities.Concrete.BookSeries", b =>
                {
                    b.HasOne("Entities.Concrete.Book", null)
                        .WithMany("BookSeries")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_book_series_books_book_id");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Address", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_cities_city_id");

                    b.HasOne("Entities.Concrete.Infos.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_countries_country_id");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Dimension", b =>
                {
                    b.HasOne("Entities.Concrete.AudioRecord", null)
                        .WithMany("Dimensions")
                        .HasForeignKey("AudioRecordId")
                        .HasConstraintName("fk_dimensions_audio_records_audio_record_id");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Edition", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editions_publishers_publisher_id");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Library", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_libraries_addresses_address_id");

                    b.HasOne("Entities.Concrete.Infos.Communication", "Communication")
                        .WithMany()
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_libraries_communications_communication_id");

                    b.Navigation("Address");

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Publisher", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publishers_addresses_address_id");

                    b.HasOne("Entities.Concrete.Infos.Communication", "Communication")
                        .WithMany()
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publishers_communications_communication_id");

                    b.Navigation("Address");

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.TechnicalPlaceholder", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_technical_placeholders_libraries_library_id");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.University", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_universities_addresses_address_id");

                    b.HasOne("Entities.Concrete.Infos.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_universities_branches_branch_id");

                    b.Navigation("Address");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Entities.Concrete.Infos.Researcher", b =>
                {
                    b.HasOne("Entities.Concrete.Infos.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("fk_first_page_person_base_universities_university_id");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Entities.Concrete.AudioRecord", b =>
                {
                    b.Navigation("Dimensions");
                });

            modelBuilder.Entity("Entities.Concrete.Book", b =>
                {
                    b.Navigation("BookSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
